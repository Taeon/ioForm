{
    "docs": [
        {
            "location": "/", 
            "text": "ioForm - simplified form handling for PHP and JavaScript\n\n\nWhy?\n\n\nI work with forms a lot. I don't like working with forms. So I built ioForm, to take away the pain.\n\n\nWhat does it do?\n\n\nThe PHP side of ioForm allows you to define a form's structure as an PHP object, and then use that definition object to spit out a perfect HTML form. With a very simple (yet flexible) template system, it's possible to wrap fields in standard markup, meaning that you don't need to update every row if you decide to change the structure of your form.\n\n\nThe JavaScript side of ioForm aims to simplify interactions with forms on the client. So for example, getting and setting values for all field types uses the same GetValue/SetValue method. In addition, ioForm returns values in a more useful form that native Javascript -- date fields return a Date object, number fields return a number, multiple selects return an array.\n\n\nIs that all?\n\n\nYes and no. When combined with ioValidate, ioForm will handle server- and client- side validation of form data. So you can define a set of validation rules once, and have them instantly work in PHP and JavaScript.", 
            "title": "Home"
        }, 
        {
            "location": "/#ioform-simplified-form-handling-for-php-and-javascript", 
            "text": "", 
            "title": "ioForm - simplified form handling for PHP and JavaScript"
        }, 
        {
            "location": "/#why", 
            "text": "I work with forms a lot. I don't like working with forms. So I built ioForm, to take away the pain.", 
            "title": "Why?"
        }, 
        {
            "location": "/#what-does-it-do", 
            "text": "The PHP side of ioForm allows you to define a form's structure as an PHP object, and then use that definition object to spit out a perfect HTML form. With a very simple (yet flexible) template system, it's possible to wrap fields in standard markup, meaning that you don't need to update every row if you decide to change the structure of your form.  The JavaScript side of ioForm aims to simplify interactions with forms on the client. So for example, getting and setting values for all field types uses the same GetValue/SetValue method. In addition, ioForm returns values in a more useful form that native Javascript -- date fields return a Date object, number fields return a number, multiple selects return an array.", 
            "title": "What does it do?"
        }, 
        {
            "location": "/#is-that-all", 
            "text": "Yes and no. When combined with ioValidate, ioForm will handle server- and client- side validation of form data. So you can define a set of validation rules once, and have them instantly work in PHP and JavaScript.", 
            "title": "Is that all?"
        }, 
        {
            "location": "/requirements-installation/", 
            "text": "Requirements\n\n\nioForm has no non-standard dependencies on either the PHP or JavaScript side. It does, however, require PHP \n= 5.4. HTML5 form elements (e.g. date, number etc.) aren't supported by some older browsers such as IE9, so if that's a concern then you might need to look into finding a suitable polyfill.\n\n\nInstalling ioForm...\n\n\n...using composer\n\n\nSimple enough, just use:\n\n\ncomposer require taeon/ioform\n\n\n\n...from source\n\n\nAlternatively, you can \ndownload the source code as a compressed file\n. \n\n\nLoading ioForm\n\n\nPHP\n\n\nIf you're using composer, you don't need to do anything. If you're installing from source, it's still very easy: ioForm conforms to the \nPSR-4 standard\n, so once you've included the autoloader file (autoload.php) somewhere in your PHP, it takes care of loading its dependencies itself.\n\n\nJavaScript\n\n\nFor now there's no compressed version, so you'll need to include the uncompressed source:\n\n\nscript src=\"[path-to-ioform]/src/js/ioForm.js\"\n/script", 
            "title": "Requirements and installation!"
        }, 
        {
            "location": "/requirements-installation/#requirements", 
            "text": "ioForm has no non-standard dependencies on either the PHP or JavaScript side. It does, however, require PHP  = 5.4. HTML5 form elements (e.g. date, number etc.) aren't supported by some older browsers such as IE9, so if that's a concern then you might need to look into finding a suitable polyfill.", 
            "title": "Requirements"
        }, 
        {
            "location": "/requirements-installation/#installing-ioform", 
            "text": "", 
            "title": "Installing ioForm..."
        }, 
        {
            "location": "/requirements-installation/#using-composer", 
            "text": "Simple enough, just use:  composer require taeon/ioform", 
            "title": "...using composer"
        }, 
        {
            "location": "/requirements-installation/#from-source", 
            "text": "Alternatively, you can  download the source code as a compressed file .", 
            "title": "...from source"
        }, 
        {
            "location": "/requirements-installation/#loading-ioform", 
            "text": "", 
            "title": "Loading ioForm"
        }, 
        {
            "location": "/requirements-installation/#php", 
            "text": "If you're using composer, you don't need to do anything. If you're installing from source, it's still very easy: ioForm conforms to the  PSR-4 standard , so once you've included the autoloader file (autoload.php) somewhere in your PHP, it takes care of loading its dependencies itself.", 
            "title": "PHP"
        }, 
        {
            "location": "/requirements-installation/#javascript", 
            "text": "For now there's no compressed version, so you'll need to include the uncompressed source:  script src=\"[path-to-ioform]/src/js/ioForm.js\" /script", 
            "title": "JavaScript"
        }, 
        {
            "location": "/php/basic-form/", 
            "text": "Creating a simple form\n\n\nSo let's get started with a very basic form. Let's say you want to create a sign-up form for a newsletter: one field for the email address, plus a submit button. Something like this, perhaps:\n\n\n\n\n\n    \nYour email:\n\n    \n\n    \n\n\n\n\n\n\n\nThe easy way: using arrays\n\n\nThere is in fact more than one way to create a form in ioForm, but we'll start with the easiest because that's the one you're most likely to use. Here's how we'd reproduce the form above:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\nThe HTML that's produced looks like this:\n\n\nform method=\nget\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n tabindex=\n1\n/\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\nPlease note that, for the sake of clarity, I've manually formatted the HTML code in the examples in this documentation with line breaks and indentation. However, ioForm does not break up or indent the HTML code that it produces -- in fact it the HTML it produces will be written as a single, long string.\n\n\nBreaking it down\n\n\nLet's look more closely at what we've just done. First of all, we instantiate a new object which will contain the definition of our form:\n\n\n$form = (new \\ioForm\\Form())\n\n\n\n\nNote that the above type of object instantiation requires PHP 5.4\n\n\n...and then we call the \nFromArray()\n method:\n\n\n-\nFromArray(\n\n\n\n\nThis method allows us to pass in a form definition as an array. We'll see later than this isn't the only way to define our form, but it is the simplest and quickest.\n\n\nThe form\n\n\nThe array we're passing in contains pretty much the absolute minimum we need to produce a working form. First off, we have the \naction\n, which is the path that the form will submit to. Then we have an array called \nelements\n, which itself contains one or more arrays that define the fields that will make up the form (it is possible to define other element types than form fields, as we'll find later).\n\n\n    array(\n        'action' =\n '/newsletter-form.php',\n        'elements' =\n array(\n            ...\n        )\n    )\n\n\n\n\nThe field\n\n\nNow we come to the field definition:\n\n\narray(\n    'label' =\n 'Your email:',\n    'type' =\n 'email',\n    'name' =\n 'email',\n    'id' =\n 'email',\n)\n\n\n\n\nEach element's definition is an array of key/value pairs. At minimum for a form field, you'll need specify the \ntype\n (i.e. what type of field is it?) and \nname\n. In most cases, field types correspond either to their input type (e.g. \ntext\n, \npassword\n, \nemail\n) or their HTML tag (e.g. \nselect\n). You can find a reference list of all field types \nhere\n. \n\n\nNote that, as we will find out later, there are other element types available besides fields (for example, layout elements like \nfieldset\n). \n\n\nIn this case, we've also specified a \nlabel\n -- which is the text that appears alongside the field -- and also an \nid\n, because this allows the label element to be linked to the field (using \nfor=\"...\"\n). This is good practice for accessibility, and it also means that clicking on the label's text focuses on the linked field.  \n\n\nOf course most forms will have more than one field: to do this, you would just have more field definitions in the \nelements\n array. See below for an example of this.\n\n\nGetting the HTML\n\n\nFinally, we use the form's \nRender()\n method to output the HTML:\n\n\necho( $form-\nRender() );\n\n\n\n\nSetting the method\n\n\nYou'll notice that while we didn't specify it, the form's method has been set to \nget\n by default. You can change this (and should, for a form like this that sends a value that will be saved) by passing a 'method' parameter in the form's definition array:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post', // That's better\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\ngives\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n tabindex=\n1\n/\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\nAdding more fields\n\n\nAdding more fields to our form just means adding more field definitions to our \nelements\n array. So let's add a couple more fields to our form:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post', // That's better\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            ),\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Email type:',\n                'type' =\n 'radio',\n                'name' =\n 'email_type',\n                'id' =\n 'email_type',\n                'options' =\n array(\n                    array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                    array( 'value' =\n 'text', 'text' =\n 'Text' )\n                )\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\n...gives this code:\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n/\n\n    \nlabel for=\nname\nYour name:\n/label\n\n    \ninput type=\ntext\n id=\nname\n name=\nname\n/\n\n    \nlabel\nEmail type:\n/label\n\n        \ninput type=\nradio\n value=\nhtml\n id=\nemail_type-html\n name=\nemail_type\n/\n\n        \nlabel for=\nemail_type-html\nHTML\n/label\n\n        \ninput type=\nradio\n value=\ntext\n id=\nemail_type-text\n name=\nemail_type\n/\n\n        \nlabel for=\nemail_type-text\nText\n/label\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\n\n...which looks like this:\n\n\n\n\nYour email:\nYour name:\nEmail type:\nHTML\nText\n\n\n\n\n\nYes, the formatting is terrible. We'll deal with how to customise your form's layout, later.\n\n\nThe hard way: using objects\n\n\nThere's another way to build a form, and while it's not as convenient as using an array, it does give an insight into what's going on behind the scenes.\n\n\nLet's start with the form itself:\n\n\n$form = new \\ioForm\\Form();\n$form-\naction = '/newsletter-form.php';\n$form-\nmethod = 'post';\n\n\n\n\nNow we create the email field:\n\n\n// Create the email field\n$field = new \\ioForm\\Core\\Definition();\n$field-\ntype = 'email';\n$field-\nname = 'email';\n$field-\nlabel = 'Your email:';\n$field-\nid = 'email';\n\n\n\n\n...and add the field to the form:\n\n\n$form-\nAddElement( $field );\n\n\n\n\nAnd finally we render the result:\n\n\n$form-\nRender();\n\n\n\n\nThe resulting output is exactly the same as our original array-based example above. In truth, when you define a form using an array, internally it converts that array into \nDefinition\n objects -- so in fact the two approaches are ultimately achieving the same thing.", 
            "title": "A basic form"
        }, 
        {
            "location": "/php/basic-form/#creating-a-simple-form", 
            "text": "So let's get started with a very basic form. Let's say you want to create a sign-up form for a newsletter: one field for the email address, plus a submit button. Something like this, perhaps:   \n     Your email:", 
            "title": "Creating a simple form"
        }, 
        {
            "location": "/php/basic-form/#the-easy-way-using-arrays", 
            "text": "There is in fact more than one way to create a form in ioForm, but we'll start with the easiest because that's the one you're most likely to use. Here's how we'd reproduce the form above:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email',\n                'id' =  'email',\n            )\n        )\n    )\n);\necho( $form- Render() );  The HTML that's produced looks like this:  form method= get  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email  tabindex= 1 / \n     input type= submit  value= Submit /  /form   Please note that, for the sake of clarity, I've manually formatted the HTML code in the examples in this documentation with line breaks and indentation. However, ioForm does not break up or indent the HTML code that it produces -- in fact it the HTML it produces will be written as a single, long string.", 
            "title": "The easy way: using arrays"
        }, 
        {
            "location": "/php/basic-form/#breaking-it-down", 
            "text": "Let's look more closely at what we've just done. First of all, we instantiate a new object which will contain the definition of our form:  $form = (new \\ioForm\\Form())  Note that the above type of object instantiation requires PHP 5.4  ...and then we call the  FromArray()  method:  - FromArray(  This method allows us to pass in a form definition as an array. We'll see later than this isn't the only way to define our form, but it is the simplest and quickest.", 
            "title": "Breaking it down"
        }, 
        {
            "location": "/php/basic-form/#the-form", 
            "text": "The array we're passing in contains pretty much the absolute minimum we need to produce a working form. First off, we have the  action , which is the path that the form will submit to. Then we have an array called  elements , which itself contains one or more arrays that define the fields that will make up the form (it is possible to define other element types than form fields, as we'll find later).      array(\n        'action' =  '/newsletter-form.php',\n        'elements' =  array(\n            ...\n        )\n    )", 
            "title": "The form"
        }, 
        {
            "location": "/php/basic-form/#the-field", 
            "text": "Now we come to the field definition:  array(\n    'label' =  'Your email:',\n    'type' =  'email',\n    'name' =  'email',\n    'id' =  'email',\n)  Each element's definition is an array of key/value pairs. At minimum for a form field, you'll need specify the  type  (i.e. what type of field is it?) and  name . In most cases, field types correspond either to their input type (e.g.  text ,  password ,  email ) or their HTML tag (e.g.  select ). You can find a reference list of all field types  here .   Note that, as we will find out later, there are other element types available besides fields (for example, layout elements like  fieldset ).   In this case, we've also specified a  label  -- which is the text that appears alongside the field -- and also an  id , because this allows the label element to be linked to the field (using  for=\"...\" ). This is good practice for accessibility, and it also means that clicking on the label's text focuses on the linked field.    Of course most forms will have more than one field: to do this, you would just have more field definitions in the  elements  array. See below for an example of this.", 
            "title": "The field"
        }, 
        {
            "location": "/php/basic-form/#getting-the-html", 
            "text": "Finally, we use the form's  Render()  method to output the HTML:  echo( $form- Render() );", 
            "title": "Getting the HTML"
        }, 
        {
            "location": "/php/basic-form/#setting-the-method", 
            "text": "You'll notice that while we didn't specify it, the form's method has been set to  get  by default. You can change this (and should, for a form like this that sends a value that will be saved) by passing a 'method' parameter in the form's definition array:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post', // That's better\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email',\n                'id' =  'email',\n            )\n        )\n    )\n);\necho( $form- Render() );  gives  form method= post  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email  tabindex= 1 / \n     input type= submit  value= Submit /  /form", 
            "title": "Setting the method"
        }, 
        {
            "location": "/php/basic-form/#adding-more-fields", 
            "text": "Adding more fields to our form just means adding more field definitions to our  elements  array. So let's add a couple more fields to our form:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post', // That's better\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email',\n                'id' =  'email',\n            ),\n            array(\n                'label' =  'Your name:',\n                'type' =  'text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Email type:',\n                'type' =  'radio',\n                'name' =  'email_type',\n                'id' =  'email_type',\n                'options' =  array(\n                    array( 'value' =  'html', 'text' =  'HTML' ),\n                    array( 'value' =  'text', 'text' =  'Text' )\n                )\n            )\n        )\n    )\n);\necho( $form- Render() );  ...gives this code:  form method= post  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email / \n     label for= name Your name: /label \n     input type= text  id= name  name= name / \n     label Email type: /label \n         input type= radio  value= html  id= email_type-html  name= email_type / \n         label for= email_type-html HTML /label \n         input type= radio  value= text  id= email_type-text  name= email_type / \n         label for= email_type-text Text /label \n     input type= submit  value= Submit /  /form   ...which looks like this:   Your email: Your name: Email type: HTML Text   Yes, the formatting is terrible. We'll deal with how to customise your form's layout, later.", 
            "title": "Adding more fields"
        }, 
        {
            "location": "/php/basic-form/#the-hard-way-using-objects", 
            "text": "There's another way to build a form, and while it's not as convenient as using an array, it does give an insight into what's going on behind the scenes.  Let's start with the form itself:  $form = new \\ioForm\\Form();\n$form- action = '/newsletter-form.php';\n$form- method = 'post';  Now we create the email field:  // Create the email field\n$field = new \\ioForm\\Core\\Definition();\n$field- type = 'email';\n$field- name = 'email';\n$field- label = 'Your email:';\n$field- id = 'email';  ...and add the field to the form:  $form- AddElement( $field );  And finally we render the result:  $form- Render();  The resulting output is exactly the same as our original array-based example above. In truth, when you define a form using an array, internally it converts that array into  Definition  objects -- so in fact the two approaches are ultimately achieving the same thing.", 
            "title": "The hard way: using objects"
        }, 
        {
            "location": "/php/attributes/", 
            "text": "ID, classes, data and other attributes\n\n\nSetting an element's ID\n\n\nIt's very simple to set any element's ID attribute. In fact we've already seen it in action, in our first example form:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email',\n                'id' =\n 'email', // Here it is\n            )\n        )\n    )\n);\n\n\n\n\n...and you can set the ID for any element the same way (including the form itself, or any structural elements). As noted before, it's good practice to give a field an ID because then you can link the field's label to the field element -- not just good for usability, but also for accessibility. \n\n\nBut ioForm makes things even easier: if you want, it will assign an ID for all fields for you automatically.\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'auto_field_id' =\n true, // Assign all fields an ID automatically\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email'\n            )\n        )\n    )\n);\n\n\n\n\n...this will assign an ID to each field, based on its \nname\n attribute. In this case, it will produce the exact same code as the original example. \n\n\nSee the Pen \nioForm: ID, classes, data and other attributes - setting a field's ID\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nHowever, this isn't always a good idea: in any given HTML page, an element's ID should be unique. What if you have two forms, each of which has an 'email' field? Simple: just assign each of the two forms a different ID, and ioForm will prefix field IDs with the ID of the form:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'id' =\n 'newsletter-form',\n        'auto_field_id' =\n true, // Assign all fields an ID automatically\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email'\n            )\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: ID, classes, data and other attributes - auto field ID with form ID prefix\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\nAt any time, you can override a given field's automatically-generated ID with something else, if you need to: \n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'id' =\n 'newsletter-form',\n        'auto_field_id' =\n true,\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'id' =\n 'my-name-field', // Set this field's ID explicitly\n            ),\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email'\n            )\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: ID, classes, data and other attributes - overriding automatic ID\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\nSetting an element's CSS classes\n\n\nAdding a class to any element is simple -- just set the class: \n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'id' =\n 'newsletter-form',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'class' =\n 'my-custom-class', // Easy as that\n            ),\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email'\n            )\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: ID, classes, data and other attributes - Setting an element's CSS classes\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nYou can do this for fields, layout elements, or even the form itself.\n\n\nBut let's say you want to apply a custom CSS class to an element that's part of a container template. You can't access these elements directly, but you can assign classes to them using the \n'classes'\n directive.\n\n\nThis directive takes an array of arrays, each with two fields: \nelement\n and \nclass\n. The \nelement\n is an identifier for the element you want to apply the class to. \n\n\nLet's say you have a template that looks like this:\n\n\ndiv\n\n    \nlabel\n/label\n\n    \nelements/\n\n\n/div\n\n\n\n\n\nioForm automatically refers the 'root' element(s) of a template as the \ncontainer\n (usually you would only have a single root element -- in the above example that would be the \ndiv\n element -- but if there's more than one then they're all referred to as the \ncontainer\n). So if we wanted to apply a class to the \ndiv\n in this example, we'd use the following syntax:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'id' =\n 'newsletter-form',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'classes' =\n array(\n                    array( \n                        'element' =\n 'container', // Apply classes to the 'container' \n                        'class' =\n 'my-custom-class' // The class(es) to apply\n                    ) \n                )\n            ),\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email'\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv\nlabel\n/label\nelements/\n/div\n'\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: ID, classes, data and other attributes - custom CSS in templates\n by Taeon (\n@Taeon\n) on \nCodePen\n.", 
            "title": "ID, classes, data and other attributes"
        }, 
        {
            "location": "/php/attributes/#id-classes-data-and-other-attributes", 
            "text": "", 
            "title": "ID, classes, data and other attributes"
        }, 
        {
            "location": "/php/attributes/#setting-an-elements-id", 
            "text": "It's very simple to set any element's ID attribute. In fact we've already seen it in action, in our first example form:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email',\n                'id' =  'email', // Here it is\n            )\n        )\n    )\n);  ...and you can set the ID for any element the same way (including the form itself, or any structural elements). As noted before, it's good practice to give a field an ID because then you can link the field's label to the field element -- not just good for usability, but also for accessibility.   But ioForm makes things even easier: if you want, it will assign an ID for all fields for you automatically.  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'auto_field_id' =  true, // Assign all fields an ID automatically\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email'\n            )\n        )\n    )\n);  ...this will assign an ID to each field, based on its  name  attribute. In this case, it will produce the exact same code as the original example.   See the Pen  ioForm: ID, classes, data and other attributes - setting a field's ID  by Taeon ( @Taeon ) on  CodePen .   However, this isn't always a good idea: in any given HTML page, an element's ID should be unique. What if you have two forms, each of which has an 'email' field? Simple: just assign each of the two forms a different ID, and ioForm will prefix field IDs with the ID of the form:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'id' =  'newsletter-form',\n        'auto_field_id' =  true, // Assign all fields an ID automatically\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email'\n            )\n        )\n    )\n);  See the Pen  ioForm: ID, classes, data and other attributes - auto field ID with form ID prefix  by Taeon ( @Taeon ) on  CodePen .  At any time, you can override a given field's automatically-generated ID with something else, if you need to:   $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'id' =  'newsletter-form',\n        'auto_field_id' =  true,\n        'elements' =  array(\n            array(\n                'label' =  'Your name:',\n                'type' =  'text',\n                'name' =  'name',\n                'id' =  'my-name-field', // Set this field's ID explicitly\n            ),\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email'\n            )\n        )\n    )\n);  See the Pen  ioForm: ID, classes, data and other attributes - overriding automatic ID  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Setting an element's ID"
        }, 
        {
            "location": "/php/attributes/#setting-an-elements-css-classes", 
            "text": "Adding a class to any element is simple -- just set the class:   $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'id' =  'newsletter-form',\n        'elements' =  array(\n            array(\n                'label' =  'Your name:',\n                'type' =  'text',\n                'name' =  'name',\n                'class' =  'my-custom-class', // Easy as that\n            ),\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email'\n            )\n        )\n    )\n);  See the Pen  ioForm: ID, classes, data and other attributes - Setting an element's CSS classes  by Taeon ( @Taeon ) on  CodePen .   You can do this for fields, layout elements, or even the form itself.  But let's say you want to apply a custom CSS class to an element that's part of a container template. You can't access these elements directly, but you can assign classes to them using the  'classes'  directive.  This directive takes an array of arrays, each with two fields:  element  and  class . The  element  is an identifier for the element you want to apply the class to.   Let's say you have a template that looks like this:  div \n     label /label \n     elements/  /div   ioForm automatically refers the 'root' element(s) of a template as the  container  (usually you would only have a single root element -- in the above example that would be the  div  element -- but if there's more than one then they're all referred to as the  container ). So if we wanted to apply a class to the  div  in this example, we'd use the following syntax:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'id' =  'newsletter-form',\n        'elements' =  array(\n            array(\n                'label' =  'Your name:',\n                'type' =  'text',\n                'name' =  'name',\n                'classes' =  array(\n                    array( \n                        'element' =  'container', // Apply classes to the 'container' \n                        'class' =  'my-custom-class' // The class(es) to apply\n                    ) \n                )\n            ),\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email'\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div label /label elements/ /div '\n        )\n    )\n);  See the Pen  ioForm: ID, classes, data and other attributes - custom CSS in templates  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Setting an element's CSS classes"
        }, 
        {
            "location": "/php/customising-layout/", 
            "text": "Customising form layout\n\n\nThe basic example form we created gives you an idea of how to build a very simple form, but of course few forms are ever really that simple. Having the fields listed one after another gives very little scope for creating an attractive form, or for breaking up a complex form into logical sections.\n\n\nioForm gives you complete control of the layout of your form, through a combination of simple but flexible templates and the use of structural elements.\n\n\nStructural elements\n\n\nSo far, we've only added field elements to our form. But there's nothing stopping you from creating a more complex layout, through the use of structural elements.\n\n\nWhile you can use pretty much any markup you like within a form, if you're looking to follow best practice then in most cases, to break up a form you would use the \nfieldset\n element. In the case of layout elements, you just have to tell ioForm that it's a layout type of element, rather than a field.\n\n\nSo for a fieldset, you need to enter \n'layout:fieldset'\n.  \n\n\nJust like the main \nform\n itself, a fieldset can accept a list of elements.\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'type' =\n 'layout:fieldset', // Instead of a 'field', this is a 'layout' element\n                'legend' =\n 'Details', // The title of our fieldset\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your email:',\n                        'type' =\n 'email',\n                        'name' =\n 'email',\n                        'id' =\n 'email',\n                    ),\n                    array(\n                        'label' =\n 'Your name:',\n                        'type' =\n 'text',\n                        'name' =\n 'name',\n                        'id' =\n 'name',\n                    )\n                )\n            ),\n            array(\n                'type' =\n 'layout:div',\n                'legend' =\n 'Options',\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Email type:',\n                        'type' =\n 'radio',\n                        'name' =\n 'email_type',\n                        'id' =\n 'email_type',\n                        'options' =\n array(\n                            array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                            array( 'value' =\n 'text', 'text' =\n 'Text' )\n                        )\n                    ),\n                    array(\n                        'label' =\n 'I agree to the terms and conditions:',\n                        'type' =\n 'checkbox',\n                        'name' =\n 'agree_terms',\n                        'id' =\n 'agree_terms'\n                    )                                   \n                )\n            )\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: Customising form layout - structural elements\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nNote that the \nfieldset\n can have a title, which is rendered as a \nlegend\n element. Although in this definiton we've used \n'legend'\n, for simplicity/consistency you may also use \n'label'\n -- it will still render a \nlegend\n tag.\n\n\nOf course \nfieldset\n isn't always going to be appropriate, but that's OK because you can pass any HTML element type and it will render accordingly. So for example, you could just as easily specify \n'layout:div'\n or \n'layout:section'\n or whatever you need. ioForm doesn't validate this: if you entered \n'layout:made_up_element'\n it would render as\n\n\nmade_up_element\n...\n/made_up_element\n\n\n\n\n\nAnd of course, you can nest as deep as you like. So you might have:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'type' =\n 'layout:fieldset',\n                'legend' =\n 'Details',\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your email:',\n                        'type' =\n 'email',\n                        'name' =\n 'email',\n                        'id' =\n 'email',\n                    ),\n                    array(\n                        'label' =\n 'Your name:',\n                        'type' =\n 'text',\n                        'name' =\n 'name',\n                        'id' =\n 'name',\n                    ),\n                    array(\n                        'type' =\n 'layout:fieldset',\n                        'elements' =\n array(\n                            array(\n                                'label' =\n 'Email type:',\n                                'type' =\n 'radio',\n                                'name' =\n 'email_type',\n                                'id' =\n 'email_type',\n                                'options' =\n array(\n                                    array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                                    array( 'value' =\n 'text', 'text' =\n 'Text' )\n                                )\n                            ),\n                            array(\n                                'label' =\n 'I agree to the terms and conditions:',\n                                'type' =\n 'checkbox',\n                                'name' =\n 'agree_terms',\n                                'id' =\n 'agree_terms'\n                            )                                   \n                        )\n                    )\n                )\n            )\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: Customising form layout -- nested layout elements\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nTemplates\n\n\nStructural elements are all very well, but if you're looking to add consistent markup to lots of fields, it would quickly become very laborious indeed. Luckily, ioForm offers a template system that makes it very easy to wrap custom markup around field elements.\n\n\nIt's might not be obvious from the example code you've seen so far, but when it renders a form ioForm automatically wraps each field element in a 'container template'. The default container template looks like this:\n\n\nlabel\n/label\nelements/\n\n\n\n\n\n...as you can see, not much going on there. Just a label element, followed by a special \nelements/\n marker that won't be rendered -- it's replaced by the field element. The label text is set automatically by ioForm.\n\n\nSo far, so dull.\n\n\nBut let's say we want to wrap all form fields in a \ndiv\n, so that we can use CSS to spruce up the layout. In our form definition, we can replace the default template string with whatever markup we want, making sure to include the \nelements/\n marker:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            ),\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Email type:',\n                'type' =\n 'radio',\n                'name' =\n 'email_type',\n                'id' =\n 'email_type',\n                'options' =\n array(\n                    array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                    array( 'value' =\n 'text', 'text' =\n 'Text' )\n                )\n            )\n        ),\n        'templates' =\n array(\n            // This is now our default field container\n            'default' =\n '\ndiv\nlabel\n/label\nelements/\n/div\n'\n        )\n    )\n);\n\n\n\n\nThe \ndefault\n template is used (by...uh...default) by all fields (except radio button elements -- we'll explore that, later). So with the above code in place, our example form now renders like this:\n\n\nSee the Pen \nioForm: Customising form layout - a simple template\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\n...OK it's still not going to win any design awards, but you get the idea.\n\n\nYou can do pretty much whatever you want in a template, as long as you include the \nelements/\n marker. So for example, with this form we have a field that requires a textual prefix/suffix:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/product-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Enter product name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Enter price:',\n                'type' =\n 'number',\n                'name' =\n 'price',\n                'id' =\n 'price',\n                'container_template' =\n 'price' // Use the new 'price' template for this field\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n',\n            // Our special template for price fields\n            'price' =\n '\ndiv class=\nform-row\nlabel\n/label\n $\nelements/\n + TAX\n/div\n'\n        )\n    )\n);\n\n\n\n\nLooks like this:\n\n\nSee the Pen \nioForm: Customising form layout - field prefix and suffix\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nOr how about the same form, but spruced up with a bit of Bootstrap?\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/product-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Enter product name:',\n                'type' =\n 'text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n                'class' =\n 'form-control' // Pretty input\n            ),\n            array(\n                'label' =\n 'Enter price:',\n                'type' =\n 'number',\n                'name' =\n 'price',\n                'id' =\n 'price',\n                'class' =\n 'form-control', // Pretty input\n                'container_template' =\n 'price'\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-group\nlabel\n/label\nelements/\n/div\n',\n            'price' =\n '\ndiv class=\nform-group\nlabel\n/label\ndiv class=\ninput-group\ndiv class=\ninput-group-addon\n$\n/div\nelements/\ndiv class=\ninput-group-addon\n+ TAX\n/div\n/div\n/div\n'  // Extra markup for prefix and suffix elements\n        )\n    )\n);\n\n\n\n\nSee the Pen \nioForm: Customising form layout - templates and Bootstrap\n by Taeon (\n@Taeon\n) on \nCodePen\n.", 
            "title": "Customising form layout"
        }, 
        {
            "location": "/php/customising-layout/#customising-form-layout", 
            "text": "The basic example form we created gives you an idea of how to build a very simple form, but of course few forms are ever really that simple. Having the fields listed one after another gives very little scope for creating an attractive form, or for breaking up a complex form into logical sections.  ioForm gives you complete control of the layout of your form, through a combination of simple but flexible templates and the use of structural elements.", 
            "title": "Customising form layout"
        }, 
        {
            "location": "/php/customising-layout/#structural-elements", 
            "text": "So far, we've only added field elements to our form. But there's nothing stopping you from creating a more complex layout, through the use of structural elements.  While you can use pretty much any markup you like within a form, if you're looking to follow best practice then in most cases, to break up a form you would use the  fieldset  element. In the case of layout elements, you just have to tell ioForm that it's a layout type of element, rather than a field.  So for a fieldset, you need to enter  'layout:fieldset' .    Just like the main  form  itself, a fieldset can accept a list of elements.  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'type' =  'layout:fieldset', // Instead of a 'field', this is a 'layout' element\n                'legend' =  'Details', // The title of our fieldset\n                'elements' =  array(\n                    array(\n                        'label' =  'Your email:',\n                        'type' =  'email',\n                        'name' =  'email',\n                        'id' =  'email',\n                    ),\n                    array(\n                        'label' =  'Your name:',\n                        'type' =  'text',\n                        'name' =  'name',\n                        'id' =  'name',\n                    )\n                )\n            ),\n            array(\n                'type' =  'layout:div',\n                'legend' =  'Options',\n                'elements' =  array(\n                    array(\n                        'label' =  'Email type:',\n                        'type' =  'radio',\n                        'name' =  'email_type',\n                        'id' =  'email_type',\n                        'options' =  array(\n                            array( 'value' =  'html', 'text' =  'HTML' ),\n                            array( 'value' =  'text', 'text' =  'Text' )\n                        )\n                    ),\n                    array(\n                        'label' =  'I agree to the terms and conditions:',\n                        'type' =  'checkbox',\n                        'name' =  'agree_terms',\n                        'id' =  'agree_terms'\n                    )                                   \n                )\n            )\n        )\n    )\n);  See the Pen  ioForm: Customising form layout - structural elements  by Taeon ( @Taeon ) on  CodePen .   Note that the  fieldset  can have a title, which is rendered as a  legend  element. Although in this definiton we've used  'legend' , for simplicity/consistency you may also use  'label'  -- it will still render a  legend  tag.  Of course  fieldset  isn't always going to be appropriate, but that's OK because you can pass any HTML element type and it will render accordingly. So for example, you could just as easily specify  'layout:div'  or  'layout:section'  or whatever you need. ioForm doesn't validate this: if you entered  'layout:made_up_element'  it would render as  made_up_element ... /made_up_element   And of course, you can nest as deep as you like. So you might have:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'type' =  'layout:fieldset',\n                'legend' =  'Details',\n                'elements' =  array(\n                    array(\n                        'label' =  'Your email:',\n                        'type' =  'email',\n                        'name' =  'email',\n                        'id' =  'email',\n                    ),\n                    array(\n                        'label' =  'Your name:',\n                        'type' =  'text',\n                        'name' =  'name',\n                        'id' =  'name',\n                    ),\n                    array(\n                        'type' =  'layout:fieldset',\n                        'elements' =  array(\n                            array(\n                                'label' =  'Email type:',\n                                'type' =  'radio',\n                                'name' =  'email_type',\n                                'id' =  'email_type',\n                                'options' =  array(\n                                    array( 'value' =  'html', 'text' =  'HTML' ),\n                                    array( 'value' =  'text', 'text' =  'Text' )\n                                )\n                            ),\n                            array(\n                                'label' =  'I agree to the terms and conditions:',\n                                'type' =  'checkbox',\n                                'name' =  'agree_terms',\n                                'id' =  'agree_terms'\n                            )                                   \n                        )\n                    )\n                )\n            )\n        )\n    )\n);  See the Pen  ioForm: Customising form layout -- nested layout elements  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Structural elements"
        }, 
        {
            "location": "/php/customising-layout/#templates", 
            "text": "Structural elements are all very well, but if you're looking to add consistent markup to lots of fields, it would quickly become very laborious indeed. Luckily, ioForm offers a template system that makes it very easy to wrap custom markup around field elements.  It's might not be obvious from the example code you've seen so far, but when it renders a form ioForm automatically wraps each field element in a 'container template'. The default container template looks like this:  label /label elements/   ...as you can see, not much going on there. Just a label element, followed by a special  elements/  marker that won't be rendered -- it's replaced by the field element. The label text is set automatically by ioForm.  So far, so dull.  But let's say we want to wrap all form fields in a  div , so that we can use CSS to spruce up the layout. In our form definition, we can replace the default template string with whatever markup we want, making sure to include the  elements/  marker:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'email',\n                'name' =  'email',\n                'id' =  'email',\n            ),\n            array(\n                'label' =  'Your name:',\n                'type' =  'text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Email type:',\n                'type' =  'radio',\n                'name' =  'email_type',\n                'id' =  'email_type',\n                'options' =  array(\n                    array( 'value' =  'html', 'text' =  'HTML' ),\n                    array( 'value' =  'text', 'text' =  'Text' )\n                )\n            )\n        ),\n        'templates' =  array(\n            // This is now our default field container\n            'default' =  ' div label /label elements/ /div '\n        )\n    )\n);  The  default  template is used (by...uh...default) by all fields (except radio button elements -- we'll explore that, later). So with the above code in place, our example form now renders like this:  See the Pen  ioForm: Customising form layout - a simple template  by Taeon ( @Taeon ) on  CodePen .   ...OK it's still not going to win any design awards, but you get the idea.  You can do pretty much whatever you want in a template, as long as you include the  elements/  marker. So for example, with this form we have a field that requires a textual prefix/suffix:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/product-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'label' =  'Enter product name:',\n                'type' =  'text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Enter price:',\n                'type' =  'number',\n                'name' =  'price',\n                'id' =  'price',\n                'container_template' =  'price' // Use the new 'price' template for this field\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-row label /label elements/ /div ',\n            // Our special template for price fields\n            'price' =  ' div class= form-row label /label  $ elements/  + TAX /div '\n        )\n    )\n);  Looks like this:  See the Pen  ioForm: Customising form layout - field prefix and suffix  by Taeon ( @Taeon ) on  CodePen .   Or how about the same form, but spruced up with a bit of Bootstrap?  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/product-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'label' =  'Enter product name:',\n                'type' =  'text',\n                'name' =  'name',\n                'id' =  'name',\n                'class' =  'form-control' // Pretty input\n            ),\n            array(\n                'label' =  'Enter price:',\n                'type' =  'number',\n                'name' =  'price',\n                'id' =  'price',\n                'class' =  'form-control', // Pretty input\n                'container_template' =  'price'\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-group label /label elements/ /div ',\n            'price' =  ' div class= form-group label /label div class= input-group div class= input-group-addon $ /div elements/ div class= input-group-addon + TAX /div /div /div '  // Extra markup for prefix and suffix elements\n        )\n    )\n);  See the Pen  ioForm: Customising form layout - templates and Bootstrap  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Templates"
        }, 
        {
            "location": "/php/manipulating_form/", 
            "text": "Manipulating a form\n\n\nSo far we've seen how to create a form from scratch. But what if you want to take an existing form and change it? You \ncould\n just make a copy of the form definition and make the necessary changes. But you might find yourself wanting to create a single form definition, and then add or remove fields -- or entire sections -- without having to create a whole new form. \n\n\nFortunately, ioForm provides a full set of functions to allow you to do this.\n\n\nShowing/hiding a field element\n\n\nLet's say we have a simple form with a few fields in it:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'type' =\n 'layout:fieldset',\n                'label' =\n 'Details',\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your name:',\n                        'type' =\n 'text',\n                        'name' =\n 'name',\n                        'id' =\n 'name',\n                    ),\n                    array(\n                        'label' =\n 'Your address:',\n                        'type' =\n 'textarea',\n                        'name' =\n 'address'\n                    ),\n                    array(\n                        'label' =\n 'Your shoe size:',\n                        'type' =\n 'number',\n                        'name' =\n 'shoe_size',\n                        'id' =\n 'shoe_size'\n                    )                                   \n                )\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n' \n        )\n    )\n);\n\n\n\n\n...we want to use the whole form in some places, but in others the 'shoe size' field isn't appropriate. No problem, just disable the field:\n\n\n$form-\nGetField( 'shoe_size' )-\nDisable();\n\n\n\n\nConversely, you could have a field that doesn't appear by default:\n\n\narray(\n    'label' =\n 'Your shoe size:',\n    'type' =\n 'number',\n    'name' =\n 'shoe_size',\n    'id' =\n 'shoe_size',\n    'enabled' =\n false // Does not appear by default\n)   \n\n\n\n\n..and then show it when needed:\n\n\n$form-\nGetField( 'shoe_size' )-\nEnable();\n\n\n\n\nManiuplating a non-field element\n\n\nThat's fine if we want to change a field's state, but what about other types of element? They work the same way (so you can use \nEnable()\n and \nDisable()\n, as well as the other methods we'll discuss later), but the difference lies in how you access them.\n\n\nTo be able to fetch a non-field element from a form, that element needs an \nalias\n. So for example, here we have two groups of elements, and we want to be able to be able to change the second group. So we assign it an alias -- in this case, \n'clothing'\n:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'type' =\n 'layout:fieldset',\n                'label' =\n 'Details',\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your name:',\n                        'type' =\n 'text',\n                        'name' =\n 'name',\n                        'id' =\n 'name',\n                    ),\n                    array(\n                        'label' =\n 'Your address:',\n                        'type' =\n 'textarea',\n                        'name' =\n 'address'\n                    )\n                )\n            ),\n            array(\n                'type' =\n 'layout:fieldset',\n                'label' =\n 'Clothing',\n                'alias' =\n 'clothing', // We use this to refer to this element\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your shoe size:',\n                        'type' =\n 'number',\n                        'name' =\n 'shoe_size',\n                        'id' =\n 'shoe_size'\n                    ),\n                    array(\n                        'label' =\n 'Your hat size:',\n                        'type' =\n 'number',\n                        'name' =\n 'hat_size',\n                        'id' =\n 'hat_size'\n                    )\n                )\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n' \n        )\n    )\n);\n\n\n\n\n...and now we can, for example, hide the \n'clothing'\n group with:\n\n\n$form-\nGetElementByAlias( 'clothing' )-\nDisable();\n\n\n\n\nAdding new elements\n\n\nSo we can show and hide existing elements, but what about adding completely new ones? As it happens, this is also quite simple.\n\n\nFirst, we create a new definition -- in pretty much the same way as we created the original form:\n\n\n$field = (new \\ioForm\\Core\\Definition())-\nFromArray(\n    array(\n        'type' =\n 'text',\n        'name' =\n 'chest_size',\n        'id' =\n 'chest_size',\n        'label' =\n 'Chest measurement'\n    )\n);\n\n\n\n\n...and then we insert it wherever we want it in the form. For example, let's just add it to the \n'clothing'\n group from the previous example:\n\n\n$form-\nGetElementByAlias( 'clothing' )-\nAppend( $field );\n\n\n\n\nSimple. But what if we wanted to insert it between the \n'shoe_size'\n and \n'hat_size'\n fields? Also simple:\n\n\n$form-\nGetField( 'shoe_size' )-\nAfter( $field );\n\n\n\n\nThere are also \nPrepend()\n and \nBefore()\n methods, whose functions you can probably guess. There's even a \nReplaceWith()\n method -- so you can replace an existing element with something new.\n\n\nCreating new structures\n\n\nBear in mind that you can create any structure you like with this approach -- you don't have to limit yourself to creating a single element at a time. So we could create a whole new section:\n\n\n$colours_section = (new \\ioForm\\Core\\Definition())-\nFromArray(\n    array(\n        'type' =\n 'layout:fieldset',\n        'label' =\n 'Favourite colours',\n        'elements' =\n array(\n            array(\n                'type' =\n 'select',\n                'name' =\n 'colour',\n                'id' =\n 'colour',\n                'label' =\n \nWhat's your favourite colour?\n,\n                'options' =\n array(\n                    array( 'value' =\n '', 'text' =\n 'Select one' ),\n                    array( 'value' =\n 'red', 'text' =\n 'Red' ),\n                    array( 'value' =\n 'green', 'text' =\n 'Green' ),\n                    array( 'value' =\n 'blue', 'text' =\n 'Blue' )\n                )\n            ),\n            array(\n                'type' =\n 'select',\n                'name' =\n 'shade',\n                'id' =\n 'shade',\n                'label' =\n \nWhat's your favourite shade?\n,\n                'options' =\n array(\n                    array( 'value' =\n '', 'text' =\n 'Select one' ),\n                    array( 'value' =\n 'light', 'text' =\n 'Light' ),\n                    array( 'value' =\n 'dark', 'text' =\n 'Dark' ),\n                )\n            )\n        )\n    )\n);\n\n$form-\nGetElementByAlias( 'clothing' )-\nAfter( $colours_section );\n\n\n\n\nSee the Pen \nioForm: Adding a new fieldset to a form\n by Taeon (\n@Taeon\n) on \nCodePen\n.", 
            "title": "Maniuplating form structure"
        }, 
        {
            "location": "/php/manipulating_form/#manipulating-a-form", 
            "text": "So far we've seen how to create a form from scratch. But what if you want to take an existing form and change it? You  could  just make a copy of the form definition and make the necessary changes. But you might find yourself wanting to create a single form definition, and then add or remove fields -- or entire sections -- without having to create a whole new form.   Fortunately, ioForm provides a full set of functions to allow you to do this.", 
            "title": "Manipulating a form"
        }, 
        {
            "location": "/php/manipulating_form/#showinghiding-a-field-element", 
            "text": "Let's say we have a simple form with a few fields in it:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'type' =  'layout:fieldset',\n                'label' =  'Details',\n                'elements' =  array(\n                    array(\n                        'label' =  'Your name:',\n                        'type' =  'text',\n                        'name' =  'name',\n                        'id' =  'name',\n                    ),\n                    array(\n                        'label' =  'Your address:',\n                        'type' =  'textarea',\n                        'name' =  'address'\n                    ),\n                    array(\n                        'label' =  'Your shoe size:',\n                        'type' =  'number',\n                        'name' =  'shoe_size',\n                        'id' =  'shoe_size'\n                    )                                   \n                )\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-row label /label elements/ /div ' \n        )\n    )\n);  ...we want to use the whole form in some places, but in others the 'shoe size' field isn't appropriate. No problem, just disable the field:  $form- GetField( 'shoe_size' )- Disable();  Conversely, you could have a field that doesn't appear by default:  array(\n    'label' =  'Your shoe size:',\n    'type' =  'number',\n    'name' =  'shoe_size',\n    'id' =  'shoe_size',\n    'enabled' =  false // Does not appear by default\n)     ..and then show it when needed:  $form- GetField( 'shoe_size' )- Enable();", 
            "title": "Showing/hiding a field element"
        }, 
        {
            "location": "/php/manipulating_form/#maniuplating-a-non-field-element", 
            "text": "That's fine if we want to change a field's state, but what about other types of element? They work the same way (so you can use  Enable()  and  Disable() , as well as the other methods we'll discuss later), but the difference lies in how you access them.  To be able to fetch a non-field element from a form, that element needs an  alias . So for example, here we have two groups of elements, and we want to be able to be able to change the second group. So we assign it an alias -- in this case,  'clothing' :  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'type' =  'layout:fieldset',\n                'label' =  'Details',\n                'elements' =  array(\n                    array(\n                        'label' =  'Your name:',\n                        'type' =  'text',\n                        'name' =  'name',\n                        'id' =  'name',\n                    ),\n                    array(\n                        'label' =  'Your address:',\n                        'type' =  'textarea',\n                        'name' =  'address'\n                    )\n                )\n            ),\n            array(\n                'type' =  'layout:fieldset',\n                'label' =  'Clothing',\n                'alias' =  'clothing', // We use this to refer to this element\n                'elements' =  array(\n                    array(\n                        'label' =  'Your shoe size:',\n                        'type' =  'number',\n                        'name' =  'shoe_size',\n                        'id' =  'shoe_size'\n                    ),\n                    array(\n                        'label' =  'Your hat size:',\n                        'type' =  'number',\n                        'name' =  'hat_size',\n                        'id' =  'hat_size'\n                    )\n                )\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-row label /label elements/ /div ' \n        )\n    )\n);  ...and now we can, for example, hide the  'clothing'  group with:  $form- GetElementByAlias( 'clothing' )- Disable();", 
            "title": "Maniuplating a non-field element"
        }, 
        {
            "location": "/php/manipulating_form/#adding-new-elements", 
            "text": "So we can show and hide existing elements, but what about adding completely new ones? As it happens, this is also quite simple.  First, we create a new definition -- in pretty much the same way as we created the original form:  $field = (new \\ioForm\\Core\\Definition())- FromArray(\n    array(\n        'type' =  'text',\n        'name' =  'chest_size',\n        'id' =  'chest_size',\n        'label' =  'Chest measurement'\n    )\n);  ...and then we insert it wherever we want it in the form. For example, let's just add it to the  'clothing'  group from the previous example:  $form- GetElementByAlias( 'clothing' )- Append( $field );  Simple. But what if we wanted to insert it between the  'shoe_size'  and  'hat_size'  fields? Also simple:  $form- GetField( 'shoe_size' )- After( $field );  There are also  Prepend()  and  Before()  methods, whose functions you can probably guess. There's even a  ReplaceWith()  method -- so you can replace an existing element with something new.", 
            "title": "Adding new elements"
        }, 
        {
            "location": "/php/manipulating_form/#creating-new-structures", 
            "text": "Bear in mind that you can create any structure you like with this approach -- you don't have to limit yourself to creating a single element at a time. So we could create a whole new section:  $colours_section = (new \\ioForm\\Core\\Definition())- FromArray(\n    array(\n        'type' =  'layout:fieldset',\n        'label' =  'Favourite colours',\n        'elements' =  array(\n            array(\n                'type' =  'select',\n                'name' =  'colour',\n                'id' =  'colour',\n                'label' =   What's your favourite colour? ,\n                'options' =  array(\n                    array( 'value' =  '', 'text' =  'Select one' ),\n                    array( 'value' =  'red', 'text' =  'Red' ),\n                    array( 'value' =  'green', 'text' =  'Green' ),\n                    array( 'value' =  'blue', 'text' =  'Blue' )\n                )\n            ),\n            array(\n                'type' =  'select',\n                'name' =  'shade',\n                'id' =  'shade',\n                'label' =   What's your favourite shade? ,\n                'options' =  array(\n                    array( 'value' =  '', 'text' =  'Select one' ),\n                    array( 'value' =  'light', 'text' =  'Light' ),\n                    array( 'value' =  'dark', 'text' =  'Dark' ),\n                )\n            )\n        )\n    )\n);\n\n$form- GetElementByAlias( 'clothing' )- After( $colours_section );  See the Pen  ioForm: Adding a new fieldset to a form  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Creating new structures"
        }, 
        {
            "location": "/php/form-options/", 
            "text": "Form options\n\n\n\n\n\n\n\n\nOption\n\n\nFormat\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nNone\n\n\nThe path that the form submits to. If you don't specify an action, the form will submit to the current page\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\nget\n\n\nForm submit method. Usually \nget\n or \npost\n\n\n\n\n\n\nenctype\n\n\nstring\n\n\nNone\n\n\nForm encoding type. Generally this isn't specified (it will default to \napplication/x-www-form-urlencoded\n) but when the form includes one or more file input elements, it must be set to \nmultipart/form-data\n. ioForm will do this for you automatically\n\n\n\n\n\n\nid\n\n\nstring\n\n\nNone\n\n\nID attribute of the form\n\n\n\n\n\n\nclass\n\n\nstring\n\n\nNone\n\n\nAdditional class(es) to apply to the the form\n\n\n\n\n\n\nauto_field_id\n\n\nboolean\n\n\nfalse\n\n\nAutomatically set the \nid\n attribute of any field element to match its \nname\n attribute (unless the field's ID is already provided by its definition). Will prepend the field's ID with the form's ID, if set.\n\n\n\n\n\n\nauto_tabindex\n\n\nboolean\n\n\nfalse\n\n\nAutomatically add \ntabindex\n attribute to all fields, to allow easy tabbing between fields\n\n\n\n\n\n\ntabindex_start\n\n\nnumber\n\n\n1\n\n\nStart index for auto tabindex. When you have more than one form in a page, you might want to number the forms sequentially", 
            "title": "Form options"
        }, 
        {
            "location": "/php/form-options/#form-options", 
            "text": "Option  Format  Default       action  string  None  The path that the form submits to. If you don't specify an action, the form will submit to the current page    method  string  get  Form submit method. Usually  get  or  post    enctype  string  None  Form encoding type. Generally this isn't specified (it will default to  application/x-www-form-urlencoded ) but when the form includes one or more file input elements, it must be set to  multipart/form-data . ioForm will do this for you automatically    id  string  None  ID attribute of the form    class  string  None  Additional class(es) to apply to the the form    auto_field_id  boolean  false  Automatically set the  id  attribute of any field element to match its  name  attribute (unless the field's ID is already provided by its definition). Will prepend the field's ID with the form's ID, if set.    auto_tabindex  boolean  false  Automatically add  tabindex  attribute to all fields, to allow easy tabbing between fields    tabindex_start  number  1  Start index for auto tabindex. When you have more than one form in a page, you might want to number the forms sequentially", 
            "title": "Form options"
        }, 
        {
            "location": "/php/fields-reference/", 
            "text": "Field types reference\n\n\nBelow is a list of all field types supported by ioForm. For convenience, example definitions are given as arrays.\n\n\nStandard elements\n\n\ntext\n\n\nA text input field.\n\n\nExample:\n\n\narray(\n    'type' =\n 'text',\n    'name' =\n 'my_text',\n    'label' =\n 'My text',\n    'id' =\n 'field_my_text',\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_text\nMy text:\n/label\ninput type=\ntext\n id=\nmy_text\n name=\nmy_text\n/\n\n\n\n\n\n\n\nMy text:\n\n\n\n\ntextarea\n\n\nBox for entering multiline text.\n\n\narray(\n    'label' =\n 'Enter some text',\n    'type' =\n 'textarea',\n    'name' =\n 'my_textarea'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_textarea\n class=\ntextarea\nEnter some text\n/label\n\n\ntextarea rows=\n2\n cols=\n20\n id=\nmy_textarea\n name=\nmy_textarea\n/textarea\n\n\n\n\n\n\n\nEnter some text\n\n\n\n\n\n\ncheckbox\n\n\nA checkbox field.\n\n\nExample:\n\n\narray(\n    'type' =\n 'checkbox',\n    'name' =\n 'my_checkbox',\n    'label' =\n 'My checkbox',\n    'id' =\n 'field_my_checkbox',\n)\n\n\n\n\nResult:\n\n\nlabel for=\nfield_my_checkbox\nMy checkbox\n/label\ninput type=\ncheckbox\n id=\nfield_my_checkbox\n name=\nmy_checkbox\n/\n\n\n\n\n\n\n\nMy checkbox\n\n\n\n\nradio\n\n\nA set of radio buttons. Options are specified as an array, \noptions\n, with each option represented as an array with \nvalue\n and \ntext\n fields.\n\n\nExample:\n\n\narray(\n    'type' =\n 'radio',\n    'name' =\n 'my_radio_buttons',\n    'label' =\n 'My radio buttons',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel\nMy radio buttons\n/label\n\n    \ninput type=\nradio\n value=\n1\n id=\nmy_radio_buttons-1\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-1\nFirst\n/label\n\n    \ninput type=\nradio\n value=\n2\n id=\nmy_radio_buttons-2\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-2\nSecond\n/label\n\n    \ninput type=\nradio\n value=\n3\n id=\nmy_radio_buttons-3\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-3\nThird\n/label\n\n\n\n\n\n\n\nMy radio buttons\nFirst\nSecond\nThird\n\n\n\n\nselect\n\n\nA select field (drop-down). As with radio fields options are specified as an array, \noptions\n, with each option represented as an array with \nvalue\n and \ntext\n fields.\n\n\nExample:\n\n\narray(\n    'type' =\n 'select',\n    'name' =\n 'my_select_field',\n    'label' =\n 'My select',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_select_field\nMy select\n/label\n\n\nselect name=\nmy_select_field\n id=\nmy_select_field\n\n    \noption value=\n1\nFirst\n/option\n\n    \noption value=\n2\nSecond\n/option\n\n    \noption value=\n3\nThird\n/option\n\n\n/select\n\n\n\n\n\n\n\nMy select\nFirst\nSecond\nThird\n\n\n\n\nselect_multiple\n\n\nA multiple select field. See the \nselect\n field type.\n\n\nExample:\n\n\narray(\n    'type' =\n 'select_multiple',\n    'name' =\n 'my_select_field',\n    'label' =\n 'My select',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_select_field\nMy multiple select\n/label\n\n\nselect multiple=\nmultiple\n id=\nmy_select_field\n name=\nmy_select_field\n\n    \noption value=\n1\nFirst\n/option\n\n    \noption value=\n2\nSecond\n/option\n\n    \noption value=\n3\nThird\n/option\n\n\n/select\n\n\n\n\n\n\n\nMy multiple select\nFirst\nSecond\nThird\n\n\n\n\nfile\n\n\nA file upload field. Note that if your form includes a file element, ioForm will automatically set the form's \nmethod\n to \npost\n and its \nenctype\n to \nmultipart/form-data\n.  \n\n\nExample:\n\n\narray(\n    'type' =\n 'file',\n    'name' =\n 'my_file_field',\n    'label' =\n 'My file upload field'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_file_field\nMy file upload field\n/label\n\n\ninput type=\nfile\n id=\nmy_file_field\n name=\nmy_file_field\n/\n\n\n\n\n\n\n\nMy file upload field\n\n\n\n\npassword\n\n\nA password field.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter password:',\n    'type' =\n 'password',\n    'name' =\n 'my_password'\n)\n\n\n\n\nResult:\n\n\n    \nlabel for=\nmy_password\n class=\npassword\nEnter password:\n/label\n\n    \ninput type=\npassword\n id=\nmy_password\n name=\nmy_password\n/\n\n\n\n\n\n\n\nEnter password:\n\n\n\n\n\n\nhidden\n\n\nA hidden field. Since it's not visible, it needs no label.\n\n\narray(\n    'type' =\n 'hidden',\n    'name' =\n 'my_hidden_value'\n)\n\n\n\n\n \ninput type=\nhidden\n name=\nmy_hidden_value\n/\n\n\n\n\n\n\n\nHTML5 elements\n\n\nThese are elements implemented in HTML5 only. Note that if you're intending to support older browsers (e.g. IE9) then you'll need to either avoid using these elements, or find a suitable polyfill.\n\n\nemail\n\n\nAn email input field. Will automatically validate input unless \nnovalidate\n is specified.\n\n\nExample:\n\n\narray(\n    'type' =\n 'email',\n    'name' =\n 'your_email',\n    'label' =\n 'Enter your email'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nyour_email\nEnter your email\n/label\n\n\ninput type=\nemail\n id=\nyour_email\n name=\nyour_email\n/\n\n\n\n\n\n\n\nEnter your email\n\n\n\n\n\n\nnumber\n\n\nA number field. Will automatically validate unless \nnovalidate\n is specified.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter number:',\n    'type' =\n 'number',\n    'name' =\n 'my_number'\n)\n\n\n\n\nResult:\n\n\n    \nlabel for=\nmy_number\nEnter number:\n/label\n\n    \ninput type=\nnumber\n id=\nmy_number\n name=\nmy_number\n/\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n\n\n\n\n\nEnter number:\n\n\n\n\n\n\ndate\n\n\nA date input field.\n\n\nBeware\n when using \ndate\n fields: behaviour varies widely across browsers. All mobile browsers (that I'm aware of) have pretty pop-up datepickers. But while some desktop browsers do implement a datepicker, others don't. And (as of the time of writing) they're all pretty ugly. You should strongly consider using some kind of prettified datepicker for desktop browsers (but don't ask me which one...).   \n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter date:',\n    'type' =\n 'date',\n    'name' =\n 'my_date'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_date\nEnter date:\n/label\n\n\ninput type=\ndate\n id=\nmy_date\n name=\nmy_date\n/\n\n\n\n\n\n\n\nEnter date:\n\n\n\n\n\n\ndatetime_local\n\n\nA field for entering date and time. As with the \ndate\n field, use with caution as behaviour varies widely across browsers.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter date/time:',\n    'type' =\n 'datetime_local',\n    'name' =\n 'my_datetime'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_datetime\nEnter date/time:\n/label\n\n\ninput type=\ndatetime-local\n id=\nmy_datetime\n name=\nmy_datetime\n/\n\n\n\n\n\n\n\nEnter date/time:\n\n\n\n\nmonth\n\n\nA field for entering a month. Beware of variations in browser behaviour.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter month:',\n    'type' =\n 'month',\n    'name' =\n 'my_month'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_month\nEnter month:\n/label\n\n\ninput type=\nmonth\n id=\nmy_month\n name=\nmy_month\n/\n\n\n\n\n\n\n\nEnter month:\n\n\n\n\nweek\n\n\nA field for entering a week. Beware of variations in browser behaviour.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter week:',\n    'type' =\n 'week',\n    'name' =\n 'my_week'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_week\nEnter week:\n/label\n\n\ninput type=\nweek\n id=\nmy_week\n name=\nmy_week\n/\n\n\n\n\n\n\n\nEnter week:\n\n\n\n\ntime\n\n\nA field for entering a time value. Beware of variations in browser behaviour.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter time:',\n    'type' =\n 'time',\n    'name' =\n 'my_time'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_time\nEnter time:\n/label\n\n\ninput type=\ntime\n id=\nmy_time\n name=\nmy_time\n/\n\n\n\n\n\n\n\nEnter time:\n\n\n\n\nurl\n\n\nA field for entering a URL.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter URL:',\n    'type' =\n 'url',\n    'name' =\n 'my_url'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_url\nEnter URL:\n/label\n\n\ninput type=\nurl\n id=\nmy_url\n name=\nmy_url\n/\n\n\n\n\n\n\n\nEnter URL:\n\n\n\n\ntelephone\n\n\nA field for entering a phone number. On mobile phones, this will (usually) open a numeric keypad.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter phone number:',\n    'type' =\n 'phone',\n    'name' =\n 'my_phone'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_phone\nEnter phone number:\n/label\n\n\ninput type=\ntel\n id=\nmy_phone\n name=\nmy_phone\n/\n\n\n\n\n\n\n\nEnter phone number:\n\n\n\n\nrange\n\n\nA field for selecting a value from a range (using a slider). Attributes \nmin\n, \nmax\n and \nstep\n are all optional.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Choose value:',\n    'type' =\n 'range',\n    'name' =\n 'my_range_value',\n    'min' =\n 10, // Minimum value\n    'max' =\n 20, // Maximum value\n    'step' =\n 2 // Interval between values\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_range_value\nChoose value:\n/label\n\n\ninput type=\nrange\n id=\nmy_range_value\n name=\nmy_range_value\n min=\n10\n max=\n20\n step=\n2\n/\n\n\n\n\n\n\n\nChoose value:\n\n\n\n\nsearch\n\n\nA field for entering a search query. From what I can tell, the effect of this is that when you use an on-screen keyboard (e.g. on a mobile phone or tablet) it will display a slightly different 'enter' key.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Enter query:',\n    'type' =\n 'search',\n    'name' =\n 'my_search_query'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_search_query\nEnter query:\n/label\n\n\ninput type=\nsearch\n id=\nmy_search_query\n name=\nmy_search_query\n/\n\n\n\n\n\n\n\nEnter query:\n\n\n\n\ncolor\n\n\nA field for selecting a colour. Beware variations in browser behaviour.\n\n\nExample:\n\n\narray(\n    'label' =\n 'Select colour:',\n    'type' =\n 'color',\n    'name' =\n 'my_color'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_color\nSelect colour:\n/label\n\n\ninput type=\ncolor\n id=\nmy_color\n name=\nmy_color\n/\n\n\n\n\n\n\n\nSelect colour:", 
            "title": "Field types reference"
        }, 
        {
            "location": "/php/fields-reference/#field-types-reference", 
            "text": "Below is a list of all field types supported by ioForm. For convenience, example definitions are given as arrays.", 
            "title": "Field types reference"
        }, 
        {
            "location": "/php/fields-reference/#standard-elements", 
            "text": "", 
            "title": "Standard elements"
        }, 
        {
            "location": "/php/fields-reference/#text", 
            "text": "A text input field.  Example:  array(\n    'type' =  'text',\n    'name' =  'my_text',\n    'label' =  'My text',\n    'id' =  'field_my_text',\n)  Result:  label for= my_text My text: /label input type= text  id= my_text  name= my_text /    My text:", 
            "title": "text"
        }, 
        {
            "location": "/php/fields-reference/#textarea", 
            "text": "Box for entering multiline text.  array(\n    'label' =  'Enter some text',\n    'type' =  'textarea',\n    'name' =  'my_textarea'\n)  Result:  label for= my_textarea  class= textarea Enter some text /label  textarea rows= 2  cols= 20  id= my_textarea  name= my_textarea /textarea    Enter some text", 
            "title": "textarea"
        }, 
        {
            "location": "/php/fields-reference/#checkbox", 
            "text": "A checkbox field.  Example:  array(\n    'type' =  'checkbox',\n    'name' =  'my_checkbox',\n    'label' =  'My checkbox',\n    'id' =  'field_my_checkbox',\n)  Result:  label for= field_my_checkbox My checkbox /label input type= checkbox  id= field_my_checkbox  name= my_checkbox /    My checkbox", 
            "title": "checkbox"
        }, 
        {
            "location": "/php/fields-reference/#radio", 
            "text": "A set of radio buttons. Options are specified as an array,  options , with each option represented as an array with  value  and  text  fields.  Example:  array(\n    'type' =  'radio',\n    'name' =  'my_radio_buttons',\n    'label' =  'My radio buttons',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label My radio buttons /label \n     input type= radio  value= 1  id= my_radio_buttons-1  name= my_radio_buttons / \n     label for= my_radio_buttons-1 First /label \n     input type= radio  value= 2  id= my_radio_buttons-2  name= my_radio_buttons / \n     label for= my_radio_buttons-2 Second /label \n     input type= radio  value= 3  id= my_radio_buttons-3  name= my_radio_buttons / \n     label for= my_radio_buttons-3 Third /label    My radio buttons First Second Third", 
            "title": "radio"
        }, 
        {
            "location": "/php/fields-reference/#select", 
            "text": "A select field (drop-down). As with radio fields options are specified as an array,  options , with each option represented as an array with  value  and  text  fields.  Example:  array(\n    'type' =  'select',\n    'name' =  'my_select_field',\n    'label' =  'My select',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label for= my_select_field My select /label  select name= my_select_field  id= my_select_field \n     option value= 1 First /option \n     option value= 2 Second /option \n     option value= 3 Third /option  /select    My select First Second Third", 
            "title": "select"
        }, 
        {
            "location": "/php/fields-reference/#select_multiple", 
            "text": "A multiple select field. See the  select  field type.  Example:  array(\n    'type' =  'select_multiple',\n    'name' =  'my_select_field',\n    'label' =  'My select',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label for= my_select_field My multiple select /label  select multiple= multiple  id= my_select_field  name= my_select_field \n     option value= 1 First /option \n     option value= 2 Second /option \n     option value= 3 Third /option  /select    My multiple select First Second Third", 
            "title": "select_multiple"
        }, 
        {
            "location": "/php/fields-reference/#file", 
            "text": "A file upload field. Note that if your form includes a file element, ioForm will automatically set the form's  method  to  post  and its  enctype  to  multipart/form-data .    Example:  array(\n    'type' =  'file',\n    'name' =  'my_file_field',\n    'label' =  'My file upload field'\n)  Result:  label for= my_file_field My file upload field /label  input type= file  id= my_file_field  name= my_file_field /    My file upload field", 
            "title": "file"
        }, 
        {
            "location": "/php/fields-reference/#password", 
            "text": "A password field.  Example:  array(\n    'label' =  'Enter password:',\n    'type' =  'password',\n    'name' =  'my_password'\n)  Result:       label for= my_password  class= password Enter password: /label \n     input type= password  id= my_password  name= my_password /    Enter password:", 
            "title": "password"
        }, 
        {
            "location": "/php/fields-reference/#hidden", 
            "text": "A hidden field. Since it's not visible, it needs no label.  array(\n    'type' =  'hidden',\n    'name' =  'my_hidden_value'\n)    input type= hidden  name= my_hidden_value /", 
            "title": "hidden"
        }, 
        {
            "location": "/php/fields-reference/#html5-elements", 
            "text": "These are elements implemented in HTML5 only. Note that if you're intending to support older browsers (e.g. IE9) then you'll need to either avoid using these elements, or find a suitable polyfill.", 
            "title": "HTML5 elements"
        }, 
        {
            "location": "/php/fields-reference/#email", 
            "text": "An email input field. Will automatically validate input unless  novalidate  is specified.  Example:  array(\n    'type' =  'email',\n    'name' =  'your_email',\n    'label' =  'Enter your email'\n)  Result:  label for= your_email Enter your email /label  input type= email  id= your_email  name= your_email /    Enter your email", 
            "title": "email"
        }, 
        {
            "location": "/php/fields-reference/#number", 
            "text": "A number field. Will automatically validate unless  novalidate  is specified.  Example:  array(\n    'label' =  'Enter number:',\n    'type' =  'number',\n    'name' =  'my_number'\n)  Result:       label for= my_number Enter number: /label \n     input type= number  id= my_number  name= my_number / \n     input type= submit  value= Submit /    Enter number:", 
            "title": "number"
        }, 
        {
            "location": "/php/fields-reference/#date", 
            "text": "A date input field.  Beware  when using  date  fields: behaviour varies widely across browsers. All mobile browsers (that I'm aware of) have pretty pop-up datepickers. But while some desktop browsers do implement a datepicker, others don't. And (as of the time of writing) they're all pretty ugly. You should strongly consider using some kind of prettified datepicker for desktop browsers (but don't ask me which one...).     Example:  array(\n    'label' =  'Enter date:',\n    'type' =  'date',\n    'name' =  'my_date'\n)  Result:  label for= my_date Enter date: /label  input type= date  id= my_date  name= my_date /    Enter date:", 
            "title": "date"
        }, 
        {
            "location": "/php/fields-reference/#datetime_local", 
            "text": "A field for entering date and time. As with the  date  field, use with caution as behaviour varies widely across browsers.  Example:  array(\n    'label' =  'Enter date/time:',\n    'type' =  'datetime_local',\n    'name' =  'my_datetime'\n)  Result:  label for= my_datetime Enter date/time: /label  input type= datetime-local  id= my_datetime  name= my_datetime /    Enter date/time:", 
            "title": "datetime_local"
        }, 
        {
            "location": "/php/fields-reference/#month", 
            "text": "A field for entering a month. Beware of variations in browser behaviour.  Example:  array(\n    'label' =  'Enter month:',\n    'type' =  'month',\n    'name' =  'my_month'\n)  Result:  label for= my_month Enter month: /label  input type= month  id= my_month  name= my_month /    Enter month:", 
            "title": "month"
        }, 
        {
            "location": "/php/fields-reference/#week", 
            "text": "A field for entering a week. Beware of variations in browser behaviour.  Example:  array(\n    'label' =  'Enter week:',\n    'type' =  'week',\n    'name' =  'my_week'\n)  Result:  label for= my_week Enter week: /label  input type= week  id= my_week  name= my_week /    Enter week:", 
            "title": "week"
        }, 
        {
            "location": "/php/fields-reference/#time", 
            "text": "A field for entering a time value. Beware of variations in browser behaviour.  Example:  array(\n    'label' =  'Enter time:',\n    'type' =  'time',\n    'name' =  'my_time'\n)  Result:  label for= my_time Enter time: /label  input type= time  id= my_time  name= my_time /    Enter time:", 
            "title": "time"
        }, 
        {
            "location": "/php/fields-reference/#url", 
            "text": "A field for entering a URL.  Example:  array(\n    'label' =  'Enter URL:',\n    'type' =  'url',\n    'name' =  'my_url'\n)  Result:  label for= my_url Enter URL: /label  input type= url  id= my_url  name= my_url /    Enter URL:", 
            "title": "url"
        }, 
        {
            "location": "/php/fields-reference/#telephone", 
            "text": "A field for entering a phone number. On mobile phones, this will (usually) open a numeric keypad.  Example:  array(\n    'label' =  'Enter phone number:',\n    'type' =  'phone',\n    'name' =  'my_phone'\n)  Result:  label for= my_phone Enter phone number: /label  input type= tel  id= my_phone  name= my_phone /    Enter phone number:", 
            "title": "telephone"
        }, 
        {
            "location": "/php/fields-reference/#range", 
            "text": "A field for selecting a value from a range (using a slider). Attributes  min ,  max  and  step  are all optional.  Example:  array(\n    'label' =  'Choose value:',\n    'type' =  'range',\n    'name' =  'my_range_value',\n    'min' =  10, // Minimum value\n    'max' =  20, // Maximum value\n    'step' =  2 // Interval between values\n)  Result:  label for= my_range_value Choose value: /label  input type= range  id= my_range_value  name= my_range_value  min= 10  max= 20  step= 2 /    Choose value:", 
            "title": "range"
        }, 
        {
            "location": "/php/fields-reference/#search", 
            "text": "A field for entering a search query. From what I can tell, the effect of this is that when you use an on-screen keyboard (e.g. on a mobile phone or tablet) it will display a slightly different 'enter' key.  Example:  array(\n    'label' =  'Enter query:',\n    'type' =  'search',\n    'name' =  'my_search_query'\n)  Result:  label for= my_search_query Enter query: /label  input type= search  id= my_search_query  name= my_search_query /    Enter query:", 
            "title": "search"
        }, 
        {
            "location": "/php/fields-reference/#color", 
            "text": "A field for selecting a colour. Beware variations in browser behaviour.  Example:  array(\n    'label' =  'Select colour:',\n    'type' =  'color',\n    'name' =  'my_color'\n)  Result:  label for= my_color Select colour: /label  input type= color  id= my_color  name= my_color /    Select colour:", 
            "title": "color"
        }, 
        {
            "location": "/php/field-options/", 
            "text": "", 
            "title": "=Field options reference"
        }, 
        {
            "location": "/php/get-set-values/", 
            "text": "", 
            "title": "=Get/set values"
        }, 
        {
            "location": "/php/css-classes/", 
            "text": "", 
            "title": "=CSS Classes"
        }, 
        {
            "location": "/php/buttons/", 
            "text": "", 
            "title": "=Buttons"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/", 
            "text": "Initialisation and basic usage\n\n\nInitialising ioForm\n\n\nTo use ioForm's JavaScript form handling, you simply need to include the script file (see \nRequirements and installation\n), and then initialise the form with the following code:\n\n\n    var form = new ioForm( '#my-form' );\n\n\n\n\nNote that the selector (in this case, '#my-form') can be any of the following:\n\n\n\n\nAn actual form element (e.g. the result of a call to \ndocument.getElementById()\n)\n\n\nAny jquery-like (or more accurately, in this case \ndocument.querySelector()\n-like) selector that returns a form, for example an ID (\n'#my-form'\n) or a class ( \n'.formclass'\n ) or element ( \n'form'\n )\n\n\nA jQuery object that contains a form element (i.e. the result of a jquery call such as \n$( '#my-form' )\n)\n\n\n\n\nHowever you should also be aware that if the submitted argument returns (or contains) more than one element, then all but the first element will be ignored and a warning will be issued via the console.\n\n\nOnce you've called this method on a form, the result is cached so that further calls to the same method will return the same object. So while it would usually make most sense to store the returned object if you're going to use it again later, there's very little penalty in terms of performance (and none in terms of functionality) to do something like this:\n\n\n    // First call\n    var form = new ioForm( '#my-form' );\n\n    // ... some stuff happens\n\n    // Second call\n    var form2 = new ioForm( '#my-form' ); // form and form2 are the same object\n\n\n\n\nGetting a value\n\n\nThe main purpose of ioForm is to make form interactions simpler, more logical, and more consistent. This is most obvious when getting (and setting, as we'll see later) a form's values.\n\n\nIn plain JavaScript, some field types, such as \ninput type=\"text\"\n fields, single \nselect\n fields, and \ntextarea\n fields, support \nelement.value\n:\n\n\n    console.log( document.getElementById( 'my_input' ).value );\n\n\n\n\nBut how do you get the selected value of a \nradio\n button? Or all selected values in a multiple \nselect\n element? That requires some more complex logic.\n\n\nWith ioForm, getting and a value for \nall\n field types uses the same method: \nGetValue()\n. So for example, a radio button:\n\n\nSee the Pen \nioForm: Getting a radio button value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nA multiple select field will return an array:\n\n\nSee the Pen \nioForm: Get multiple select value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nWhen using a date field, instead of a string you get a date object:\n\n\nSee the Pen \nioForm: Get date field value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nSetting a value\n\n\nIf you want to set a field's value the following will work (in pretty much all reasonably modern browsers) for some field types, such as \ninput type=\"text\"\n fields, single \nselect\n fields, and \ntextarea\n fields:\n\n\n    var my_input = document.getElementById( 'my_input' );\n    input.value = 'Hello world';\n\n\n\n\nIf you want to set the value of a \nradio\n button, or pass an array of values to a multiple \nselect\n element then you'd have to start fiddling around with finding individual elements, and setting  a particular attribute (\nchecked\n, \nselected\n or whichever is appropriate). [Yes some browsers support setting a multiple select's value with .value, but not all].\n\n\nAgain, With ioForm setting values for \nall\n field types uses the same method: \nSetValue()\n. So for example, you can set the value of a radio button like this:\n\n\nSee the Pen \nioForm: Setting a radio button's value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nOr you could pass an array of values to a multiple select field:\n\n\nSee the Pen \nioForm: Set multiple select value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nOr what if you're using a date field, and you don't want to mess about converting a date object to a string? No problem:\n\n\nSee the Pen \nioForm: set date field value\n by Taeon (\n@Taeon\n) on \nCodePen\n.\n\n\n\n\n\n\nEvents\n\n\nIn addition to providing consistent methods for getting and setting values, ioForm also implements a simple system for listening for field events. Like jQuery's event handling, it uses the \non()\n method.\n\n\nFor example, if you want to know when a radio field's value changes:\n\n\nSee the Pen \nioForm: Listen for change event\n by Taeon (\n@Taeon\n) on \nCodePen\n.", 
            "title": "Initialisation and basic usage"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/#initialisation-and-basic-usage", 
            "text": "", 
            "title": "Initialisation and basic usage"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/#initialising-ioform", 
            "text": "To use ioForm's JavaScript form handling, you simply need to include the script file (see  Requirements and installation ), and then initialise the form with the following code:      var form = new ioForm( '#my-form' );  Note that the selector (in this case, '#my-form') can be any of the following:   An actual form element (e.g. the result of a call to  document.getElementById() )  Any jquery-like (or more accurately, in this case  document.querySelector() -like) selector that returns a form, for example an ID ( '#my-form' ) or a class (  '.formclass'  ) or element (  'form'  )  A jQuery object that contains a form element (i.e. the result of a jquery call such as  $( '#my-form' ) )   However you should also be aware that if the submitted argument returns (or contains) more than one element, then all but the first element will be ignored and a warning will be issued via the console.  Once you've called this method on a form, the result is cached so that further calls to the same method will return the same object. So while it would usually make most sense to store the returned object if you're going to use it again later, there's very little penalty in terms of performance (and none in terms of functionality) to do something like this:      // First call\n    var form = new ioForm( '#my-form' );\n\n    // ... some stuff happens\n\n    // Second call\n    var form2 = new ioForm( '#my-form' ); // form and form2 are the same object", 
            "title": "Initialising ioForm"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/#getting-a-value", 
            "text": "The main purpose of ioForm is to make form interactions simpler, more logical, and more consistent. This is most obvious when getting (and setting, as we'll see later) a form's values.  In plain JavaScript, some field types, such as  input type=\"text\"  fields, single  select  fields, and  textarea  fields, support  element.value :      console.log( document.getElementById( 'my_input' ).value );  But how do you get the selected value of a  radio  button? Or all selected values in a multiple  select  element? That requires some more complex logic.  With ioForm, getting and a value for  all  field types uses the same method:  GetValue() . So for example, a radio button:  See the Pen  ioForm: Getting a radio button value  by Taeon ( @Taeon ) on  CodePen .   A multiple select field will return an array:  See the Pen  ioForm: Get multiple select value  by Taeon ( @Taeon ) on  CodePen .   When using a date field, instead of a string you get a date object:  See the Pen  ioForm: Get date field value  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Getting a value"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/#setting-a-value", 
            "text": "If you want to set a field's value the following will work (in pretty much all reasonably modern browsers) for some field types, such as  input type=\"text\"  fields, single  select  fields, and  textarea  fields:      var my_input = document.getElementById( 'my_input' );\n    input.value = 'Hello world';  If you want to set the value of a  radio  button, or pass an array of values to a multiple  select  element then you'd have to start fiddling around with finding individual elements, and setting  a particular attribute ( checked ,  selected  or whichever is appropriate). [Yes some browsers support setting a multiple select's value with .value, but not all].  Again, With ioForm setting values for  all  field types uses the same method:  SetValue() . So for example, you can set the value of a radio button like this:  See the Pen  ioForm: Setting a radio button's value  by Taeon ( @Taeon ) on  CodePen .   Or you could pass an array of values to a multiple select field:  See the Pen  ioForm: Set multiple select value  by Taeon ( @Taeon ) on  CodePen .   Or what if you're using a date field, and you don't want to mess about converting a date object to a string? No problem:  See the Pen  ioForm: set date field value  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Setting a value"
        }, 
        {
            "location": "/javascript/initialisation-basic-usage/#events", 
            "text": "In addition to providing consistent methods for getting and setting values, ioForm also implements a simple system for listening for field events. Like jQuery's event handling, it uses the  on()  method.  For example, if you want to know when a radio field's value changes:  See the Pen  ioForm: Listen for change event  by Taeon ( @Taeon ) on  CodePen .", 
            "title": "Events"
        }
    ]
}