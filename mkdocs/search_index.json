{
    "docs": [
        {
            "location": "/", 
            "text": "ioForm - simplified form handling for PHP and JavaScript\n\n\nWhy?\n\n\nI work with forms a lot. I don't like working with forms. So I built ioForm, to take away the pain.\n\n\nWhat does it do?\n\n\nThe PHP side of ioForm allows you to define a form's structure as an PHP object, and then use that definition object to spit out a perfect HTML form. With a very simple (yet flexible) template system, it's possible to wrap fields in standard markup, meaning that you don't need to update every row if you decide to change the structure of your form.\n\n\nThe JavaScript side of ioForm aims to simplify interactions with forms on the client. So for example, getting and setting values for all field types uses the same GetValue/SetValue method. In addition, ioForm returns values in a more useful form that native Javascript -- date fields return a Date object, number fields return a number, multiple selects return an array.\n\n\nIs that all?\n\n\nYes and no. When combined with ioValidate, ioForm will handle server- and client- side validation of form data. So you can define a set of validation rules once, and have them instantly work in PHP and JavaScript.", 
            "title": "Home"
        }, 
        {
            "location": "/#ioform-simplified-form-handling-for-php-and-javascript", 
            "text": "", 
            "title": "ioForm - simplified form handling for PHP and JavaScript"
        }, 
        {
            "location": "/#why", 
            "text": "I work with forms a lot. I don't like working with forms. So I built ioForm, to take away the pain.", 
            "title": "Why?"
        }, 
        {
            "location": "/#what-does-it-do", 
            "text": "The PHP side of ioForm allows you to define a form's structure as an PHP object, and then use that definition object to spit out a perfect HTML form. With a very simple (yet flexible) template system, it's possible to wrap fields in standard markup, meaning that you don't need to update every row if you decide to change the structure of your form.  The JavaScript side of ioForm aims to simplify interactions with forms on the client. So for example, getting and setting values for all field types uses the same GetValue/SetValue method. In addition, ioForm returns values in a more useful form that native Javascript -- date fields return a Date object, number fields return a number, multiple selects return an array.", 
            "title": "What does it do?"
        }, 
        {
            "location": "/#is-that-all", 
            "text": "Yes and no. When combined with ioValidate, ioForm will handle server- and client- side validation of form data. So you can define a set of validation rules once, and have them instantly work in PHP and JavaScript.", 
            "title": "Is that all?"
        }, 
        {
            "location": "/requirements-installation/", 
            "text": "Requirements\n\n\nioForm has no non-standard dependencies on either the PHP or JavaScript side. It does, however, require PHP \n= 5.4. HTML5 form elements (e.g. date, number etc.) aren't supported by some older browsers such as IE9, so if that's a concern then you might need to look into finding a suitable polyfill.\n\n\nInstalling ioForm...\n\n\n...using composer\n\n\nSimple enough, just use:\n\n\ncomposer require taeon/ioform\n\n\n\n...from source\n\n\nAlternatively, you can \ndownload the source code as a compressed file\n. \n\n\nLoading ioForm\n\n\nPHP\n\n\nIf you're using composer, you don't need to do anything. If you're installing from source, it's still very easy: ioForm conforms to the \nPSR-4 standard\n, so once you've included the autoloader file (autoload.php) somewhere in your PHP, it takes care of loading its dependencies itself.\n\n\nJavaScript\n\n\nFor now there's no compressed version, so you'll need to include the uncompressed source:\n\n\nscript src=\"[path-to-ioform]/src/js/ioForm.js\"\n/script", 
            "title": "Requirements and installation!"
        }, 
        {
            "location": "/requirements-installation/#requirements", 
            "text": "ioForm has no non-standard dependencies on either the PHP or JavaScript side. It does, however, require PHP  = 5.4. HTML5 form elements (e.g. date, number etc.) aren't supported by some older browsers such as IE9, so if that's a concern then you might need to look into finding a suitable polyfill.", 
            "title": "Requirements"
        }, 
        {
            "location": "/requirements-installation/#installing-ioform", 
            "text": "", 
            "title": "Installing ioForm..."
        }, 
        {
            "location": "/requirements-installation/#using-composer", 
            "text": "Simple enough, just use:  composer require taeon/ioform", 
            "title": "...using composer"
        }, 
        {
            "location": "/requirements-installation/#from-source", 
            "text": "Alternatively, you can  download the source code as a compressed file .", 
            "title": "...from source"
        }, 
        {
            "location": "/requirements-installation/#loading-ioform", 
            "text": "", 
            "title": "Loading ioForm"
        }, 
        {
            "location": "/requirements-installation/#php", 
            "text": "If you're using composer, you don't need to do anything. If you're installing from source, it's still very easy: ioForm conforms to the  PSR-4 standard , so once you've included the autoloader file (autoload.php) somewhere in your PHP, it takes care of loading its dependencies itself.", 
            "title": "PHP"
        }, 
        {
            "location": "/requirements-installation/#javascript", 
            "text": "For now there's no compressed version, so you'll need to include the uncompressed source:  script src=\"[path-to-ioform]/src/js/ioForm.js\" /script", 
            "title": "JavaScript"
        }, 
        {
            "location": "/php/basic-form/", 
            "text": "Creating a simple form\n\n\nSo let's get started with a very basic form. Let's say you want to create a sign-up form for a newsletter: one field for the email address, plus a submit button. Something like this, perhaps:\n\n\n\n\n\n    \nYour email:\n\n    \n\n    \n\n\n\n\n\n\n\nThe easy way: using arrays\n\n\nThere is in fact more than one way to create a form in ioForm, but we'll start with the easiest because that's the one you're most likely to use. Here's how we'd reproduce the form above:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'Email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\nThe HTML that's produced looks like this:\n\n\nform method=\nget\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n tabindex=\n1\n/\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\nPlease note that, for the sake of clarity, I've manually formatted the HTML code in the examples in this documentation with line breaks and indentation. However, ioForm does not break up or indent the HTML code that it produces -- in fact it the HTML it produces will be written as a single, long string.\n\n\nBreaking it down\n\n\nLet's look more closely at what we've just done. First of all, we instantiate a new object which will contain the definition of our form:\n\n\n$form = (new \\ioForm\\Form())\n\n\n\n\nNote that the above type of object instantiation requires PHP 5.4\n\n\n...and then we call the \nFromArray()\n method:\n\n\n-\nFromArray(\n\n\n\n\nThis method allows us to pass in a form definition as an array. We'll see later than this isn't the only way to define our form, but it is the simplest and quickest.\n\n\nThe form\n\n\nThe array we're passing in contains pretty much the absolute minimum we need to produce a working form. First off, we have the \naction\n, which is the path that the form will submit to. Then we have an array called \nelements\n, which itself contains one or more arrays that define the fields that will make up the form (it is possible to define other element types than form fields, as we'll find later).\n\n\n    array(\n        'action' =\n '/newsletter-form.php',\n        'elements' =\n array(\n            ...\n        )\n    )\n\n\n\n\nThe field\n\n\nNow we come to the field definition:\n\n\narray(\n    'label' =\n 'Your email:',\n    'type' =\n 'Email',\n    'name' =\n 'email',\n    'id' =\n 'email',\n)\n\n\n\n\nEach element's definition is an array of key/value pairs. At minimum for a form field, you'll need specify the \ntype\n (i.e. what type of field is it?) and \nname\n. Field types always start with a capital letter, for example \nText\n, \nRadio\n, \nSelect\n. You can find a reference list of all field types \nhere\n. \n\n\nNote that, as we will find out later, there are other element types available besides fields (for example, layout elements like Fieldset). Internally, a type is specified as its group followed by its type -- for example, \nField:Text\n, \nLayout:Fieldset\n. Since fields are the most commonly used sort of element, to save typing it's assumed that if the group isn't specified (e.g. \nText\n, \nRadio\n) then it's of the \nField:\n group.\n\n\nIn this case, we've also specified a \nlabel\n -- which is the text that appears alongside the field -- and also an \nid\n, because this allows the label element to be linked to the field (using \nfor=\"...\"\n). This is good practice for accessibility, and it also means that clicking on the label's text focuses on the linked field.  \n\n\nOf course most forms will have more than one field: to do this, you would just have more field definitions in the \nelements\n array. See below for an example of this.\n\n\nGetting the HTML\n\n\nFinally, we use the form's \nRender()\n method to output the HTML:\n\n\necho( $form-\nRender() );\n\n\n\n\nSetting the method\n\n\nYou'll notice that while we didn't specify it, the form's method has been set to \nget\n by default. You can change this (and should, for a form like this that sends a value that will be saved) by passing a 'method' parameter in the form's definition array:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post', // That's better\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'Email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\ngives\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n tabindex=\n1\n/\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\nAdding more fields\n\n\nAdding more fields to our form just means adding more field definitions to our \nelements\n array. So let's add a couple more fields to our form:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post', // That's better\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'Email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            ),\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'Text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Email type:',\n                'type' =\n 'Radio',\n                'name' =\n 'email_type',\n                'id' =\n 'email_type',\n                'options' =\n array(\n                    array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                    array( 'value' =\n 'text', 'text' =\n 'Text' )\n                )\n            )\n        )\n    )\n);\necho( $form-\nRender() );\n\n\n\n\n...gives this code:\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \nlabel for=\nemail\nYour email:\n/label\n\n    \ninput type=\nemail\n id=\nemail\n name=\nemail\n/\n\n    \nlabel for=\nname\nYour name:\n/label\n\n    \ninput type=\ntext\n id=\nname\n name=\nname\n/\n\n    \nlabel\nEmail type:\n/label\n\n        \ninput type=\nradio\n value=\nhtml\n id=\nemail_type-html\n name=\nemail_type\n/\n\n        \nlabel for=\nemail_type-html\nHTML\n/label\n\n        \ninput type=\nradio\n value=\ntext\n id=\nemail_type-text\n name=\nemail_type\n/\n\n        \nlabel for=\nemail_type-text\nText\n/label\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\n\n...which looks like this:\n\n\n\n\nYour email:\nYour name:\nEmail type:\nHTML\nText\n\n\n\n\n\nYes, the formatting is terrible. We'll deal with how to customise your form's layout, later.\n\n\nThe hard way: using objects\n\n\nThere's another way to build a form, and while it's not as convenient as using an array, it does give an insight into what's going on behind the scenes.\n\n\nLet's start with the form itself:\n\n\n$form = new \\ioForm\\Form();\n$form-\naction = '/newsletter-form.php';\n$form-\nmethod = 'post';\n\n\n\n\nNow we create the email field:\n\n\n// Create the email field\n$field = new \\ioForm\\Core\\Definition();\n$field-\ntype = 'Email';\n$field-\nname = 'email';\n$field-\nlabel = 'Your email:';\n$field-\nid = 'email';\n\n\n\n\n...and add the field to the form:\n\n\n$form-\nAddElement( $field );\n\n\n\n\nAnd finally we render the result:\n\n\n$form-\nRender();\n\n\n\n\nThe resulting output is exactly the same as our original array-based example above. In truth, when you define a form using an array, internally it converts that array into \nDefinition\n objects -- so in fact the two approaches are ultimately achieving the same thing.", 
            "title": "A basic form"
        }, 
        {
            "location": "/php/basic-form/#creating-a-simple-form", 
            "text": "So let's get started with a very basic form. Let's say you want to create a sign-up form for a newsletter: one field for the email address, plus a submit button. Something like this, perhaps:   \n     Your email:", 
            "title": "Creating a simple form"
        }, 
        {
            "location": "/php/basic-form/#the-easy-way-using-arrays", 
            "text": "There is in fact more than one way to create a form in ioForm, but we'll start with the easiest because that's the one you're most likely to use. Here's how we'd reproduce the form above:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'Email',\n                'name' =  'email',\n                'id' =  'email',\n            )\n        )\n    )\n);\necho( $form- Render() );  The HTML that's produced looks like this:  form method= get  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email  tabindex= 1 / \n     input type= submit  value= Submit /  /form   Please note that, for the sake of clarity, I've manually formatted the HTML code in the examples in this documentation with line breaks and indentation. However, ioForm does not break up or indent the HTML code that it produces -- in fact it the HTML it produces will be written as a single, long string.", 
            "title": "The easy way: using arrays"
        }, 
        {
            "location": "/php/basic-form/#breaking-it-down", 
            "text": "Let's look more closely at what we've just done. First of all, we instantiate a new object which will contain the definition of our form:  $form = (new \\ioForm\\Form())  Note that the above type of object instantiation requires PHP 5.4  ...and then we call the  FromArray()  method:  - FromArray(  This method allows us to pass in a form definition as an array. We'll see later than this isn't the only way to define our form, but it is the simplest and quickest.", 
            "title": "Breaking it down"
        }, 
        {
            "location": "/php/basic-form/#the-form", 
            "text": "The array we're passing in contains pretty much the absolute minimum we need to produce a working form. First off, we have the  action , which is the path that the form will submit to. Then we have an array called  elements , which itself contains one or more arrays that define the fields that will make up the form (it is possible to define other element types than form fields, as we'll find later).      array(\n        'action' =  '/newsletter-form.php',\n        'elements' =  array(\n            ...\n        )\n    )", 
            "title": "The form"
        }, 
        {
            "location": "/php/basic-form/#the-field", 
            "text": "Now we come to the field definition:  array(\n    'label' =  'Your email:',\n    'type' =  'Email',\n    'name' =  'email',\n    'id' =  'email',\n)  Each element's definition is an array of key/value pairs. At minimum for a form field, you'll need specify the  type  (i.e. what type of field is it?) and  name . Field types always start with a capital letter, for example  Text ,  Radio ,  Select . You can find a reference list of all field types  here .   Note that, as we will find out later, there are other element types available besides fields (for example, layout elements like Fieldset). Internally, a type is specified as its group followed by its type -- for example,  Field:Text ,  Layout:Fieldset . Since fields are the most commonly used sort of element, to save typing it's assumed that if the group isn't specified (e.g.  Text ,  Radio ) then it's of the  Field:  group.  In this case, we've also specified a  label  -- which is the text that appears alongside the field -- and also an  id , because this allows the label element to be linked to the field (using  for=\"...\" ). This is good practice for accessibility, and it also means that clicking on the label's text focuses on the linked field.    Of course most forms will have more than one field: to do this, you would just have more field definitions in the  elements  array. See below for an example of this.", 
            "title": "The field"
        }, 
        {
            "location": "/php/basic-form/#getting-the-html", 
            "text": "Finally, we use the form's  Render()  method to output the HTML:  echo( $form- Render() );", 
            "title": "Getting the HTML"
        }, 
        {
            "location": "/php/basic-form/#setting-the-method", 
            "text": "You'll notice that while we didn't specify it, the form's method has been set to  get  by default. You can change this (and should, for a form like this that sends a value that will be saved) by passing a 'method' parameter in the form's definition array:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post', // That's better\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'Email',\n                'name' =  'email',\n                'id' =  'email',\n            )\n        )\n    )\n);\necho( $form- Render() );  gives  form method= post  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email  tabindex= 1 / \n     input type= submit  value= Submit /  /form", 
            "title": "Setting the method"
        }, 
        {
            "location": "/php/basic-form/#adding-more-fields", 
            "text": "Adding more fields to our form just means adding more field definitions to our  elements  array. So let's add a couple more fields to our form:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post', // That's better\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'Email',\n                'name' =  'email',\n                'id' =  'email',\n            ),\n            array(\n                'label' =  'Your name:',\n                'type' =  'Text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Email type:',\n                'type' =  'Radio',\n                'name' =  'email_type',\n                'id' =  'email_type',\n                'options' =  array(\n                    array( 'value' =  'html', 'text' =  'HTML' ),\n                    array( 'value' =  'text', 'text' =  'Text' )\n                )\n            )\n        )\n    )\n);\necho( $form- Render() );  ...gives this code:  form method= post  action= /newsletter-form.php \n     label for= email Your email: /label \n     input type= email  id= email  name= email / \n     label for= name Your name: /label \n     input type= text  id= name  name= name / \n     label Email type: /label \n         input type= radio  value= html  id= email_type-html  name= email_type / \n         label for= email_type-html HTML /label \n         input type= radio  value= text  id= email_type-text  name= email_type / \n         label for= email_type-text Text /label \n     input type= submit  value= Submit /  /form   ...which looks like this:   Your email: Your name: Email type: HTML Text   Yes, the formatting is terrible. We'll deal with how to customise your form's layout, later.", 
            "title": "Adding more fields"
        }, 
        {
            "location": "/php/basic-form/#the-hard-way-using-objects", 
            "text": "There's another way to build a form, and while it's not as convenient as using an array, it does give an insight into what's going on behind the scenes.  Let's start with the form itself:  $form = new \\ioForm\\Form();\n$form- action = '/newsletter-form.php';\n$form- method = 'post';  Now we create the email field:  // Create the email field\n$field = new \\ioForm\\Core\\Definition();\n$field- type = 'Email';\n$field- name = 'email';\n$field- label = 'Your email:';\n$field- id = 'email';  ...and add the field to the form:  $form- AddElement( $field );  And finally we render the result:  $form- Render();  The resulting output is exactly the same as our original array-based example above. In truth, when you define a form using an array, internally it converts that array into  Definition  objects -- so in fact the two approaches are ultimately achieving the same thing.", 
            "title": "The hard way: using objects"
        }, 
        {
            "location": "/php/customising-layout/", 
            "text": "Customising form layout\n\n\nThe basic example form we created gives you an idea of how to build a very simple form, but of course few forms are ever really that simple. Having the fields listed one after another gives very little scope for creating an attractive form, or for breaking up a complex form into logical sections.\n\n\nioForm gives you complete control of the layout of your form, through a combination of simple but flexible templates and the use of structural elements.\n\n\nStructural elements\n\n\nSo far, we've only added field elements to our form. But there's nothing stopping you from creating a more complex layout, through the use of structural elements.\n\n\nWhile you can use pretty much any markup you like within a form, if you're looking to follow best practice then in most cases, to break up a form you would use the \nfieldset\n element. You might remember from when it was briefly mentioned before, all elements are represented internally by their group and their type. So a text field's type is represented as \nField:Text\n, for example, but you don't need to enter the group part ('Field:') because ioForm assumes that when the group part is missing, it's a field. \n\n\nIn the case of layout elements, you have to specify the group. So for a fieldset, you need to enter \n'Layout:Fieldset'\n.  \n\n\nJust like the main \nform\n itself, a fieldset can accept a list of elements.\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'type' =\n 'Layout:Fieldset', // Instead of a 'Field', this is a 'Layout' element\n                'legend' =\n 'Details', // The title of our fieldset\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Your email:',\n                        'type' =\n 'Email',\n                        'name' =\n 'email',\n                        'id' =\n 'email',\n                    ),\n                    array(\n                        'label' =\n 'Your name:',\n                        'type' =\n 'Text',\n                        'name' =\n 'name',\n                        'id' =\n 'name',\n                    )\n                )\n            ),\n            array(\n                'type' =\n 'Layout:Fieldset',\n                'elements' =\n array(\n                    array(\n                        'label' =\n 'Email type:',\n                        'type' =\n 'Radio',\n                        'name' =\n 'email_type',\n                        'id' =\n 'email_type',\n                        'options' =\n array(\n                            array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                            array( 'value' =\n 'text', 'text' =\n 'Text' )\n                        )\n                    ),\n                    array(\n                        'label' =\n 'I agree to the terms and conditions:',\n                        'type' =\n 'Checkbox',\n                        'name' =\n 'agree_terms',\n                        'id' =\n 'agree_terms'\n                    )                                   \n                )\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n' \n        )\n    )\n);\n\n\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \nfieldset\n\n        \nlegend\nDetails\n/legend\n\n        \ndiv class=\nform-row\n\n            \nlabel for=\nemail\nYour email:\n/label\n\n            \ninput type=\nemail\n id=\nemail\n name=\nemail\n/\n\n        \n/div\n\n        \ndiv class=\nform-row\n\n            \nlabel for=\nname\nYour name:\n/label\n\n            \ninput type=\ntext\n id=\nname\n name=\nname\n/\n\n        \n/div\n\n    \n/fieldset\n\n    \nfieldset\n\n        \ndiv class=\nform-row\n\n            \nlabel\nEmail type:\n/label\n\n            \ninput type=\nradio\n value=\nhtml\n id=\nemail_type-html\n name=\nemail_type\n/\n\n            \nlabel for=\nemail_type-html\nHTML\n/label\n\n            \ninput type=\nradio\n value=\ntext\n id=\nemail_type-text\n name=\nemail_type\n/\n\n            \nlabel for=\nemail_type-text\nText\n/label\n\n        \n/div\n\n        \ndiv class=\nform-row\n\n            \nlabel for=\nagree_terms\nI agree to the terms and conditions:\n/label\n\n            \ninput type=\ncheckbox\n id=\nagree_terms\n name=\nagree_terms\n/\n\n        \n/div\n\n    \n/fieldset\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n \n\n\n\n\n\n\nDetails\nYour email:\nYour name:\nEmail type:\nHTML\nText\nI agree to the terms and conditions:\n\n\n\n\n\nNote that the \nfieldset\n can have a title, which is rendered as a \nlegend\n element. Although in this definiton we've used \n'legend'\n, for simplicity/consistency you may also use \n'label'\n -- it will still render a \nlegend\n tag.\n\n\nOf course \nFieldset\n isn't always going to be appropriate, but that's OK because you can pass any HTML element type and it will render accordingly. So for example, you could just as easily specify \n'Layout:Div'\n or \n'Layout:Section'\n or whatever you need.\n\n\nTemplates\n\n\nStructural elements are all very well, but if you're looking to add consistent markup to lots of fields, it would quickly become very laborious indeed. Luckily, ioForm offers a template system that makes it very easy to wrap custom markup around field elements. \n\n\nIt's might not be obvious from the example code you've seen so far, but when it renders a form ioForm automatically wraps each field element in a 'container template'. The default container template looks like this:\n\n\nlabel\n/label\nelements/\n\n\n\n\n\n...as you can see, not much going on there. Just a label element, followed by a special \nelements/\n marker that won't be rendered -- it's replaced by the field element. The label text is set automatically by ioForm.\n\n\nSo far, so dull.\n\n\nBut let's say we want to wrap all form fields in a \ndiv\n, so that we can use CSS to spruce up the layout. In our form definition, we can replace the default template string with whatever markup we want, making sure to include the \nelements/\n marker:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/newsletter-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Your email:',\n                'type' =\n 'Email',\n                'name' =\n 'email',\n                'id' =\n 'email',\n            ),\n            array(\n                'label' =\n 'Your name:',\n                'type' =\n 'Text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Email type:',\n                'type' =\n 'Radio',\n                'name' =\n 'email_type',\n                'id' =\n 'email_type',\n                'options' =\n array(\n                    array( 'value' =\n 'html', 'text' =\n 'HTML' ),\n                    array( 'value' =\n 'text', 'text' =\n 'Text' )\n                )\n            )\n        ),\n        'templates' =\n array(\n            // This is now our default field container\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n' \n        )\n    )\n);\n\n\n\n\nThe \ndefault\n template is used (by...uh...default) by all fields (except radio button elements -- we'll explore that, later). So with the above code in place, our example form now renders like this:\n\n\nform method=\npost\n action=\n/newsletter-form.php\n\n    \ndiv class=\nform-row\n\n        \nlabel for=\nemail\nYour email:\n/label\n\n        \ninput type=\nemail\n id=\nemail\n name=\nemail\n/\n\n    \n/div\n\n    \ndiv class=\nform-row\n\n        \nlabel for=\nname\nYour name:\n/label\n\n        \ninput type=\ntext\n id=\nname\n name=\nname\n/\n\n    \n/div\n\n    \ndiv class=\nform-row\n\n        \nlabel\nEmail type:\n/label\n\n            \ninput type=\nradio\n value=\nhtml\n id=\nemail_type-html\n name=\nemail_type\n/\n\n            \nlabel for=\nemail_type-html\nHTML\n/label\n\n            \ninput type=\nradio\n value=\ntext\n id=\nemail_type-text\n name=\nemail_type\n/\n\n            \nlabel for=\nemail_type-text\nText\n/label\n\n    \n/div\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n\n\n\n\n\n...and looks like this:\n\n\n\n\nYour email:\nYour name:\nEmail type:\nHTML\nText\n\n\n\n\n\n...OK it's still not going to win any design awards, but you get the idea. \n\n\nYou can do pretty much whatever you want in a template, as long as you include the \nelements/\n marker. So for example, with this form we have a field that requires a textual prefix/suffix:\n\n\n$form = (new \\ioForm\\Form())\n-\nFromArray(\n    array(\n        'action' =\n '/product-form.php',\n        'method' =\n 'post',\n        'elements' =\n array(\n            array(\n                'label' =\n 'Enter product name:',\n                'type' =\n 'Text',\n                'name' =\n 'name',\n                'id' =\n 'name',\n            ),\n            array(\n                'label' =\n 'Enter price:',\n                'type' =\n 'Number',\n                'name' =\n 'price',\n                'id' =\n 'price',\n                'container_template' =\n 'price' // Use the new 'price' template for this field\n            )\n        ),\n        'templates' =\n array(\n            'default' =\n '\ndiv class=\nform-row\nlabel\n/label\nelements/\n/div\n',\n            // Our special template for price fields\n            'price' =\n '\ndiv class=\nform-row\nlabel\n/label\n $\nelements/\n + TAX\n/div\n' \n        )\n    )\n);\n\n\n\n\nRenders as\n\n\nform method=\npost\n action=\n/product-form.php\n\n    \ndiv class=\nform-row\n\n        \nlabel for=\nname\nEnter product name:\n/label\ninput type=\ntext\n id=\nname\n name=\nname\n/\n\n    \n/div\n\n    \ndiv class=\nform-row\n\n        \nlabel for=\nprice\nEnter price:\n/label\n \n        $\ninput type=\nnumber\n id=\nprice\n name=\nprice\n/\n + TAX\n    \n/div\n\n    \ninput type=\nsubmit\n value=\nSubmit\n/\n\n\n/form\n \n\n\n\n\n\n\nEnter product name:\nEnter price:\n $\n + TAX", 
            "title": "Customising form layout"
        }, 
        {
            "location": "/php/customising-layout/#customising-form-layout", 
            "text": "The basic example form we created gives you an idea of how to build a very simple form, but of course few forms are ever really that simple. Having the fields listed one after another gives very little scope for creating an attractive form, or for breaking up a complex form into logical sections.  ioForm gives you complete control of the layout of your form, through a combination of simple but flexible templates and the use of structural elements.", 
            "title": "Customising form layout"
        }, 
        {
            "location": "/php/customising-layout/#structural-elements", 
            "text": "So far, we've only added field elements to our form. But there's nothing stopping you from creating a more complex layout, through the use of structural elements.  While you can use pretty much any markup you like within a form, if you're looking to follow best practice then in most cases, to break up a form you would use the  fieldset  element. You might remember from when it was briefly mentioned before, all elements are represented internally by their group and their type. So a text field's type is represented as  Field:Text , for example, but you don't need to enter the group part ('Field:') because ioForm assumes that when the group part is missing, it's a field.   In the case of layout elements, you have to specify the group. So for a fieldset, you need to enter  'Layout:Fieldset' .    Just like the main  form  itself, a fieldset can accept a list of elements.  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'type' =  'Layout:Fieldset', // Instead of a 'Field', this is a 'Layout' element\n                'legend' =  'Details', // The title of our fieldset\n                'elements' =  array(\n                    array(\n                        'label' =  'Your email:',\n                        'type' =  'Email',\n                        'name' =  'email',\n                        'id' =  'email',\n                    ),\n                    array(\n                        'label' =  'Your name:',\n                        'type' =  'Text',\n                        'name' =  'name',\n                        'id' =  'name',\n                    )\n                )\n            ),\n            array(\n                'type' =  'Layout:Fieldset',\n                'elements' =  array(\n                    array(\n                        'label' =  'Email type:',\n                        'type' =  'Radio',\n                        'name' =  'email_type',\n                        'id' =  'email_type',\n                        'options' =  array(\n                            array( 'value' =  'html', 'text' =  'HTML' ),\n                            array( 'value' =  'text', 'text' =  'Text' )\n                        )\n                    ),\n                    array(\n                        'label' =  'I agree to the terms and conditions:',\n                        'type' =  'Checkbox',\n                        'name' =  'agree_terms',\n                        'id' =  'agree_terms'\n                    )                                   \n                )\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-row label /label elements/ /div ' \n        )\n    )\n);  form method= post  action= /newsletter-form.php \n     fieldset \n         legend Details /legend \n         div class= form-row \n             label for= email Your email: /label \n             input type= email  id= email  name= email / \n         /div \n         div class= form-row \n             label for= name Your name: /label \n             input type= text  id= name  name= name / \n         /div \n     /fieldset \n     fieldset \n         div class= form-row \n             label Email type: /label \n             input type= radio  value= html  id= email_type-html  name= email_type / \n             label for= email_type-html HTML /label \n             input type= radio  value= text  id= email_type-text  name= email_type / \n             label for= email_type-text Text /label \n         /div \n         div class= form-row \n             label for= agree_terms I agree to the terms and conditions: /label \n             input type= checkbox  id= agree_terms  name= agree_terms / \n         /div \n     /fieldset \n     input type= submit  value= Submit /  /form     Details Your email: Your name: Email type: HTML Text I agree to the terms and conditions:   Note that the  fieldset  can have a title, which is rendered as a  legend  element. Although in this definiton we've used  'legend' , for simplicity/consistency you may also use  'label'  -- it will still render a  legend  tag.  Of course  Fieldset  isn't always going to be appropriate, but that's OK because you can pass any HTML element type and it will render accordingly. So for example, you could just as easily specify  'Layout:Div'  or  'Layout:Section'  or whatever you need.", 
            "title": "Structural elements"
        }, 
        {
            "location": "/php/customising-layout/#templates", 
            "text": "Structural elements are all very well, but if you're looking to add consistent markup to lots of fields, it would quickly become very laborious indeed. Luckily, ioForm offers a template system that makes it very easy to wrap custom markup around field elements.   It's might not be obvious from the example code you've seen so far, but when it renders a form ioForm automatically wraps each field element in a 'container template'. The default container template looks like this:  label /label elements/   ...as you can see, not much going on there. Just a label element, followed by a special  elements/  marker that won't be rendered -- it's replaced by the field element. The label text is set automatically by ioForm.  So far, so dull.  But let's say we want to wrap all form fields in a  div , so that we can use CSS to spruce up the layout. In our form definition, we can replace the default template string with whatever markup we want, making sure to include the  elements/  marker:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/newsletter-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'label' =  'Your email:',\n                'type' =  'Email',\n                'name' =  'email',\n                'id' =  'email',\n            ),\n            array(\n                'label' =  'Your name:',\n                'type' =  'Text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Email type:',\n                'type' =  'Radio',\n                'name' =  'email_type',\n                'id' =  'email_type',\n                'options' =  array(\n                    array( 'value' =  'html', 'text' =  'HTML' ),\n                    array( 'value' =  'text', 'text' =  'Text' )\n                )\n            )\n        ),\n        'templates' =  array(\n            // This is now our default field container\n            'default' =  ' div class= form-row label /label elements/ /div ' \n        )\n    )\n);  The  default  template is used (by...uh...default) by all fields (except radio button elements -- we'll explore that, later). So with the above code in place, our example form now renders like this:  form method= post  action= /newsletter-form.php \n     div class= form-row \n         label for= email Your email: /label \n         input type= email  id= email  name= email / \n     /div \n     div class= form-row \n         label for= name Your name: /label \n         input type= text  id= name  name= name / \n     /div \n     div class= form-row \n         label Email type: /label \n             input type= radio  value= html  id= email_type-html  name= email_type / \n             label for= email_type-html HTML /label \n             input type= radio  value= text  id= email_type-text  name= email_type / \n             label for= email_type-text Text /label \n     /div \n     input type= submit  value= Submit /  /form   ...and looks like this:   Your email: Your name: Email type: HTML Text   ...OK it's still not going to win any design awards, but you get the idea.   You can do pretty much whatever you want in a template, as long as you include the  elements/  marker. So for example, with this form we have a field that requires a textual prefix/suffix:  $form = (new \\ioForm\\Form())\n- FromArray(\n    array(\n        'action' =  '/product-form.php',\n        'method' =  'post',\n        'elements' =  array(\n            array(\n                'label' =  'Enter product name:',\n                'type' =  'Text',\n                'name' =  'name',\n                'id' =  'name',\n            ),\n            array(\n                'label' =  'Enter price:',\n                'type' =  'Number',\n                'name' =  'price',\n                'id' =  'price',\n                'container_template' =  'price' // Use the new 'price' template for this field\n            )\n        ),\n        'templates' =  array(\n            'default' =  ' div class= form-row label /label elements/ /div ',\n            // Our special template for price fields\n            'price' =  ' div class= form-row label /label  $ elements/  + TAX /div ' \n        )\n    )\n);  Renders as  form method= post  action= /product-form.php \n     div class= form-row \n         label for= name Enter product name: /label input type= text  id= name  name= name / \n     /div \n     div class= form-row \n         label for= price Enter price: /label  \n        $ input type= number  id= price  name= price /  + TAX\n     /div \n     input type= submit  value= Submit /  /form     Enter product name: Enter price:  $  + TAX", 
            "title": "Templates"
        }, 
        {
            "location": "/php/form-options/", 
            "text": "Form options\n\n\n\n\n\n\n\n\nOption\n\n\nFormat\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nNone\n\n\nThe path that the form submits to. If you don't specify an action, the form will submit to the current page\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\nget\n\n\nForm submit method. Usually \nget\n or \npost\n\n\n\n\n\n\nenctype\n\n\nstring\n\n\nNone\n\n\nForm encoding type. Generally this isn't specified (it will default to XXXXXXXXXX) but when the form includes one or more file input elements, it must be set to \nmultipart/form-data\n. ioForm will do this for you automatically\n\n\n\n\n\n\nauto_tabindex\n\n\nboolean\n\n\nfalse\n\n\nAutomatically add \ntabindex\n attribute to all fields, to allow easy tabbing between fields\n\n\n\n\n\n\ntabindex_start\n\n\nnumber\n\n\n1\n\n\nStart index for auto tabindex. When you have more than one form in a page, you might want to number the forms sequentially", 
            "title": "Form options"
        }, 
        {
            "location": "/php/form-options/#form-options", 
            "text": "Option  Format  Default       action  string  None  The path that the form submits to. If you don't specify an action, the form will submit to the current page    method  string  get  Form submit method. Usually  get  or  post    enctype  string  None  Form encoding type. Generally this isn't specified (it will default to XXXXXXXXXX) but when the form includes one or more file input elements, it must be set to  multipart/form-data . ioForm will do this for you automatically    auto_tabindex  boolean  false  Automatically add  tabindex  attribute to all fields, to allow easy tabbing between fields    tabindex_start  number  1  Start index for auto tabindex. When you have more than one form in a page, you might want to number the forms sequentially", 
            "title": "Form options"
        }, 
        {
            "location": "/php/fields-reference/", 
            "text": "Field types reference\n\n\nBelow is a list of all field types supported by ioForm. For convenience, example definitions are given as arrays.\n\n\nText\n\n\nA text input field.\n\n\nExample:\n\n\narray(\n    'type' =\n 'Text',\n    'name' =\n 'my_text',\n    'label' =\n 'My text',\n    'id' =\n 'field_my_text',\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_text\nMy text:\n/label\ninput type=\ntext\n id=\nmy_text\n name=\nmy_text\n/\n\n\n\n\n\n\n\nMy text:\n\n\n\n\nCheckbox\n\n\nA checkbox field.\n\n\nExample:\n\n\narray(\n    'type' =\n 'Checkbox',\n    'name' =\n 'my_checkbox',\n    'label' =\n 'My checkbox',\n    'id' =\n 'field_my_checkbox',\n)\n\n\n\n\nResult:\n\n\nlabel for=\nfield_my_checkbox\nMy checkbox\n/label\ninput type=\ncheckbox\n id=\nfield_my_checkbox\n name=\nmy_checkbox\n/\n\n\n\n\n\n\n\nMy checkbox\n\n\n\n\nRadio\n\n\nA set of radio buttons. Options are specified as an array, \noptions\n, with each option represented as an array with \nvalue\n and \ntext\n fields.\n\n\nExample:\n\n\narray(\n    'type' =\n 'Radio',\n    'name' =\n 'my_radio_buttons',\n    'label' =\n 'My radio buttons',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel\nMy radio buttons\n/label\n\n    \ninput type=\nradio\n value=\n1\n id=\nmy_radio_buttons-1\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-1\nFirst\n/label\n\n    \ninput type=\nradio\n value=\n2\n id=\nmy_radio_buttons-2\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-2\nSecond\n/label\n\n    \ninput type=\nradio\n value=\n3\n id=\nmy_radio_buttons-3\n name=\nmy_radio_buttons\n/\n\n    \nlabel for=\nmy_radio_buttons-3\nThird\n/label\n\n\n\n\n\n\n\nMy radio buttons\nFirst\nSecond\nThird\n\n\n\n\nSelect\n\n\nA select field (drop-down). As with radio fields options are specified as an array, \noptions\n, with each option represented as an array with \nvalue\n and \ntext\n fields.\n\n\nExample:\n\n\narray(\n    'type' =\n 'Select',\n    'name' =\n 'my_select_field',\n    'label' =\n 'My select',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_select_field\nMy select\n/label\n\n\nselect name=\nmy_select_field\n id=\nmy_select_field\n\n    \noption value=\n1\nFirst\n/option\n\n    \noption value=\n2\nSecond\n/option\n\n    \noption value=\n3\nThird\n/option\n\n\n/select\n\n\n\n\n\n\n\nMy select\nFirst\nSecond\nThird\n\n\n\n\nSelectMultiple\n\n\nA multiple select field. See the Select field type.\n\n\nExample:\n\n\narray(\n    'type' =\n 'SelectMultiple',\n    'name' =\n 'my_select_field',\n    'label' =\n 'My select',\n    'options' =\n array(\n        array( 'value' =\n 1, 'text' =\n 'First' ),\n        array( 'value' =\n 2, 'text' =\n 'Second' ),\n        array( 'value' =\n 3, 'text' =\n 'Third' )\n    )\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_select_field\nMy multiple select\n/label\n\n\nselect multiple=\nmultiple\n id=\nmy_select_field\n name=\nmy_select_field\n\n    \noption value=\n1\nFirst\n/option\n\n    \noption value=\n2\nSecond\n/option\n\n    \noption value=\n3\nThird\n/option\n\n\n/select\n\n\n\n\n\n\n\nMy multiple select\nFirst\nSecond\nThird\n\n\n\n\nFile\n\n\nA file upload field. Note that if your form includes a file element, ioForm will automatically set the form's \nmethod\n to \npost\n and its \nenctype\n to \nmultipart/form-data\n.  \n\n\nExample:\n\n\narray(\n    'type' =\n 'File',\n    'name' =\n 'my_file_field',\n    'label' =\n 'My file upload field'\n)\n\n\n\n\nResult:\n\n\nlabel for=\nmy_file_field\nMy file upload field\n/label\n\n\ninput type=\nfile\n id=\nmy_file_field\n name=\nmy_file_field\n/\n\n\n\n\n\n\n\nMy file upload field\n\n\n\n\nHTML5 elements\n\n\nThese are elements implemented in HTML5 only. Note that if you're intending to support older browsers (e.g. IE9) then you'll need to either avoid using these elements, or find a suitable polyfill.\n\n\nEmail\n\n\nAn email input field. HTML5 only. Will automatically validate input unless \nnovalidate\n is specified.\n\n\nExample:\n\n\narray(\n    'type' =\n 'Email',\n    'name' =\n 'your_email',\n    'label' =\n 'Enter your email',\n    'id' =\n 'field_email',\n)", 
            "title": "Field types reference"
        }, 
        {
            "location": "/php/fields-reference/#field-types-reference", 
            "text": "Below is a list of all field types supported by ioForm. For convenience, example definitions are given as arrays.", 
            "title": "Field types reference"
        }, 
        {
            "location": "/php/fields-reference/#text", 
            "text": "A text input field.  Example:  array(\n    'type' =  'Text',\n    'name' =  'my_text',\n    'label' =  'My text',\n    'id' =  'field_my_text',\n)  Result:  label for= my_text My text: /label input type= text  id= my_text  name= my_text /    My text:", 
            "title": "Text"
        }, 
        {
            "location": "/php/fields-reference/#checkbox", 
            "text": "A checkbox field.  Example:  array(\n    'type' =  'Checkbox',\n    'name' =  'my_checkbox',\n    'label' =  'My checkbox',\n    'id' =  'field_my_checkbox',\n)  Result:  label for= field_my_checkbox My checkbox /label input type= checkbox  id= field_my_checkbox  name= my_checkbox /    My checkbox", 
            "title": "Checkbox"
        }, 
        {
            "location": "/php/fields-reference/#radio", 
            "text": "A set of radio buttons. Options are specified as an array,  options , with each option represented as an array with  value  and  text  fields.  Example:  array(\n    'type' =  'Radio',\n    'name' =  'my_radio_buttons',\n    'label' =  'My radio buttons',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label My radio buttons /label \n     input type= radio  value= 1  id= my_radio_buttons-1  name= my_radio_buttons / \n     label for= my_radio_buttons-1 First /label \n     input type= radio  value= 2  id= my_radio_buttons-2  name= my_radio_buttons / \n     label for= my_radio_buttons-2 Second /label \n     input type= radio  value= 3  id= my_radio_buttons-3  name= my_radio_buttons / \n     label for= my_radio_buttons-3 Third /label    My radio buttons First Second Third", 
            "title": "Radio"
        }, 
        {
            "location": "/php/fields-reference/#select", 
            "text": "A select field (drop-down). As with radio fields options are specified as an array,  options , with each option represented as an array with  value  and  text  fields.  Example:  array(\n    'type' =  'Select',\n    'name' =  'my_select_field',\n    'label' =  'My select',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label for= my_select_field My select /label  select name= my_select_field  id= my_select_field \n     option value= 1 First /option \n     option value= 2 Second /option \n     option value= 3 Third /option  /select    My select First Second Third", 
            "title": "Select"
        }, 
        {
            "location": "/php/fields-reference/#selectmultiple", 
            "text": "A multiple select field. See the Select field type.  Example:  array(\n    'type' =  'SelectMultiple',\n    'name' =  'my_select_field',\n    'label' =  'My select',\n    'options' =  array(\n        array( 'value' =  1, 'text' =  'First' ),\n        array( 'value' =  2, 'text' =  'Second' ),\n        array( 'value' =  3, 'text' =  'Third' )\n    )\n)  Result:  label for= my_select_field My multiple select /label  select multiple= multiple  id= my_select_field  name= my_select_field \n     option value= 1 First /option \n     option value= 2 Second /option \n     option value= 3 Third /option  /select    My multiple select First Second Third", 
            "title": "SelectMultiple"
        }, 
        {
            "location": "/php/fields-reference/#file", 
            "text": "A file upload field. Note that if your form includes a file element, ioForm will automatically set the form's  method  to  post  and its  enctype  to  multipart/form-data .    Example:  array(\n    'type' =  'File',\n    'name' =  'my_file_field',\n    'label' =  'My file upload field'\n)  Result:  label for= my_file_field My file upload field /label  input type= file  id= my_file_field  name= my_file_field /    My file upload field", 
            "title": "File"
        }, 
        {
            "location": "/php/fields-reference/#html5-elements", 
            "text": "These are elements implemented in HTML5 only. Note that if you're intending to support older browsers (e.g. IE9) then you'll need to either avoid using these elements, or find a suitable polyfill.", 
            "title": "HTML5 elements"
        }, 
        {
            "location": "/php/fields-reference/#email", 
            "text": "An email input field. HTML5 only. Will automatically validate input unless  novalidate  is specified.  Example:  array(\n    'type' =  'Email',\n    'name' =  'your_email',\n    'label' =  'Enter your email',\n    'id' =  'field_email',\n)", 
            "title": "Email"
        }, 
        {
            "location": "/php/field-options/", 
            "text": "", 
            "title": "=Field options reference"
        }, 
        {
            "location": "/php/get-set-values/", 
            "text": "", 
            "title": "=Get/set values"
        }, 
        {
            "location": "/php/css-classes/", 
            "text": "", 
            "title": "=CSS Classes"
        }, 
        {
            "location": "/php/manipulating_form/", 
            "text": "", 
            "title": "=Maniuplating form"
        }
    ]
}